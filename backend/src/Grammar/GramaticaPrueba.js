/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GramaticaPrueba = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,10],$V2=[1,8],$V3=[5,10,11,13],$V4=[2,8],$V5=[5,10,11,13,15,19,24,37,63,64,65,66,67,71,72,74,80,108,109,110],$V6=[1,24],$V7=[1,30],$V8=[1,25],$V9=[1,32],$Va=[1,31],$Vb=[1,33],$Vc=[1,34],$Vd=[1,35],$Ve=[1,39],$Vf=[10,11,13,15,19,24,37,63,64,65,66],$Vg=[1,54],$Vh=[2,124],$Vi=[10,11,13,19,37,63,64,65,66],$Vj=[27,47],$Vk=[2,46],$Vl=[1,66],$Vm=[1,67],$Vn=[1,68],$Vo=[1,70],$Vp=[1,83],$Vq=[1,81],$Vr=[1,72],$Vs=[1,73],$Vt=[1,74],$Vu=[1,75],$Vv=[1,76],$Vw=[1,77],$Vx=[1,79],$Vy=[1,80],$Vz=[1,96],$VA=[26,27,47,82,84,85,86,87,88,89,90,91,92,93,94,95,96],$VB=[1,102],$VC=[1,105],$VD=[1,104],$VE=[1,106],$VF=[1,107],$VG=[1,108],$VH=[1,109],$VI=[1,110],$VJ=[1,111],$VK=[1,112],$VL=[1,113],$VM=[1,114],$VN=[1,115],$VO=[1,116],$VP=[1,117],$VQ=[1,122],$VR=[2,123],$VS=[26,47],$VT=[1,127],$VU=[1,132],$VV=[1,135],$VW=[2,122],$VX=[1,183],$VY=[1,182],$VZ=[1,181],$V_=[1,179],$V$=[1,178],$V01=[1,180],$V11=[1,185],$V21=[1,186],$V31=[1,187],$V41=[26,27,47,82,84,89,90,91,92,93,94,95,96],$V51=[26,27,47,82,84,85,86,89,90,91,92,93,94,95,96],$V61=[26,27,47,89,90,91,92,93,94,95,96],$V71=[26,27,47,93,94,95,96],$V81=[10,11,13,15,19,24,37,63,64,65,66,67,71,72,74,80,81,108,109,110],$V91=[10,11,15,19,37,63,64,65,66,67,71,72,74,80,108,109,110],$Va1=[1,195];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"ComienzoA":4,"EOF":5,"InstruccionesA":6,"SentenciaClase":7,"SentenciaInterface":8,"COMENTARIOS":9,"ComentarioLinea":10,"ComentarioMulti":11,"ListaInterfaces":12,"public":13,"interface":14,"id":15,"InicioInterface":16,"{":17,"InterfaceMenu":18,"}":19,"DeclaracionInterface":20,"TIPO":21,"(":22,"Metodos_FuncionesI":23,"void":24,"Parametros_Tipo":25,")":26,";":27,"ListaClases":28,"class":29,"InicioClase":30,"MenuClase":31,"DeclaracionClase":32,"Metodos_Funciones":33,"DECLARACION":34,"static":35,"main":36,"String":37,"[":38,"]":39,"args":40,"BlockInstrucciones":41,"EXPRESION_METODO":42,"=":43,"EXPRESION":44,"ListaDeclaracion":45,"DECLARACION2":46,",":47,"AsignacionV_P":48,"Increment_Decrement":49,"Instrucciones":50,"INSTRUCCION":51,"SOUT":52,"WHILE":53,"IF":54,"DOWHILE":55,"FOR":56,"AsignacionV_P_SIMPLE":57,"CONTINUE":58,"Return_F":59,"Return_M":60,"BREAK":61,"Increment_Decrement2":62,"int":63,"boolean":64,"double":65,"char":66,"for":67,"Declaracion_f":68,"incremento":69,"decremento":70,"do":71,"while":72,"Condicionales":73,"System":74,".":75,"out":76,"TipoPrint":77,"println":78,"print":79,"if":80,"else":81,"-":82,"!":83,"+":84,"*":85,"/":86,"%":87,"^":88,"<":89,">":90,">=":91,"<=":92,"==":93,"!=":94,"||":95,"&&":96,"decimal":97,"true":98,"false":99,"cadena":100,"caracter":101,"entero":102,"+=":103,"-=":104,"Llamar_Metodo_Exp":105,"DeclaracionM_Funciones":106,"L_ids":107,"continue":108,"return":109,"break":110,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"ComentarioLinea",11:"ComentarioMulti",13:"public",14:"interface",15:"id",17:"{",19:"}",22:"(",24:"void",26:")",27:";",29:"class",35:"static",36:"main",37:"String",38:"[",39:"]",40:"args",43:"=",47:",",63:"int",64:"boolean",65:"double",66:"char",67:"for",69:"incremento",70:"decremento",71:"do",72:"while",74:"System",75:".",76:"out",78:"println",79:"print",80:"if",81:"else",82:"-",83:"!",84:"+",85:"*",86:"/",87:"%",88:"^",89:"<",90:">",91:">=",92:"<=",93:"==",94:"!=",95:"||",96:"&&",97:"decimal",98:"true",99:"false",100:"cadena",101:"caracter",102:"entero",103:"+=",104:"-=",108:"continue",109:"return",110:"break"},
productions_: [0,[3,2],[3,0],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[9,1],[9,1],[12,2],[12,1],[8,4],[16,3],[16,2],[18,2],[18,1],[20,5],[20,4],[20,5],[20,1],[23,3],[23,2],[28,2],[28,1],[7,4],[30,3],[30,2],[31,2],[31,1],[32,5],[32,4],[32,5],[32,4],[32,1],[32,11],[32,2],[32,1],[32,4],[34,4],[34,3],[46,3],[45,3],[45,1],[48,3],[48,1],[48,1],[33,3],[33,3],[33,2],[33,2],[50,2],[50,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[21,1],[21,1],[21,1],[21,1],[21,1],[56,9],[68,4],[68,3],[68,2],[49,2],[49,2],[62,3],[62,3],[55,5],[52,9],[77,1],[77,1],[53,3],[54,3],[54,5],[54,5],[73,3],[41,3],[41,2],[44,2],[44,2],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,3],[44,1],[57,4],[57,4],[57,4],[57,5],[57,4],[42,4],[42,3],[42,1],[105,3],[105,1],[106,3],[107,3],[107,1],[25,4],[25,2],[25,1],[58,2],[60,2],[59,3],[61,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return this.$
break;
case 3:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1]
break;
case 4:
this.$ = [$$[$0]]
break;
case 5:
this.$ = new Arbol($$[$0]); this.$= $$[$0] ;
break;
case 6:
this.$ = new Arbol($$[$0]); this.$= $$[$0];
break;
case 7: case 21: case 35: case 38: case 55: case 60: case 116:
this.$=$$[$0]
break;
case 8:
this.$ = new Arbol($$[$0]); 
break;
case 9: case 10:
this.$ =new Comentarios(this._$.first_line,this._$.first_column,$$[$0]);
break;
case 11: case 16: case 24: case 29: case 52:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 12: case 17: case 25: case 30: case 53: case 126: case 129:
 this.$ = [$$[$0]]; 
break;
case 13:
this.$ =new Interface(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0-1]);
break;
case 14: case 27: case 89: case 90:
this.$ = $$[$0-1];
break;
case 15: case 28: case 91:
this.$ = [];
break;
case 18:
this.$ =new FunctionInterface(this._$.first_line,this._$.first_column,$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1]);
break;
case 19:
this.$= new FunctionInterface(this._$.first_line,this._$.first_column,"-",$$[$0-2],$$[$0-1],$$[$0]);
break;
case 20:
this.$= new FunctionInterface(this._$.first_line,this._$.first_column,"-",$$[$0-3],$$[$0-2],$$[$0-1]);
break;
case 22:
this.$= new Metodo_FuncionIN(this._$.first_line,this._$.first_column,$$[$0-2]);
break;
case 23:
this.$= new Metodo_FuncionIN(this._$.first_line,this._$.first_column,[]);
break;
case 26:
this.$ =new Class(this._$.first_line,this._$.first_column,$$[$0-1],$$[$0]); console.log("en una clase") 
break;
case 31:
this.$ =new Metodo_C(this._$.first_line,this._$.first_column,$$[$0-4],$$[$0-3],$$[$0-2],$$[$0]);
break;
case 32:
this.$ =new Metodo_C(this._$.first_line,this._$.first_column,".",$$[$0-2],$$[$0-2],$$[$0]);
break;
case 33:
this.$ =new Funcion_C(this._$.first_line,this._$.first_column,$$[$0-4],$$[$0-3],$$[$0-2],$$[$0]);
break;
case 34:
this.$= new Funcion_C(this._$.first_line,this._$.first_column,".",$$[$0-3],$$[$0-2],$$[$0]);
break;
case 36:
this.$= new Main(this._$.first_line,this._$.first_column,$$[$0-7],$$[$0]);
break;
case 37:
this.$=$$[$0-1]
break;
case 39: case 117: case 118: case 119:
this.$= new Asignacion(this._$.first_line,this._$.first_column,$$[$0-3],$$[$0-1]);
break;
case 40: case 41: case 42:
this.$ =new DeclaracionAfuera(this._$.first_line,this._$.first_column,$$[$0-1]);
break;
case 43:
$$[$0-2].push(this.$ =new Coma(this._$.first_line,this._$.first_column,",",$$[$0]));this.$=$$[$0-2];
break;
case 44:
this.$ = [$$[$0]];
break;
case 45:
this.$= new Asignacion(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0]);
break;
case 46:
this.$= new Asignacion(this._$.first_line,this._$.first_column,$$[$0],null);
break;
case 47:
this.$= new Asignacion(this._$.first_line,this._$.first_column,"",$$[$0]);
break;
case 48:
this.$= new Metodo_Fc(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0]);
break;
case 50: case 51:
this.$ =new Metodo_Fc(this._$.first_line,this._$.first_column,null,$$[$0]);
break;
case 54: case 56: case 57: case 58: case 59: case 61: case 62: case 64: case 65: case 84:
this.$ = $$[$0];
break;
case 63:
this.$ = $$[$0]; console.log("continue");
break;
case 66:
this.$ = $$[$0];console.log("break");
break;
case 67:
this.$=$$[$0];console.log("incremento")
break;
case 68: case 69: case 70: case 71: case 72:
this.$ = new TipoV($$[$0]);
break;
case 73:
this.$= new For_alv(this._$.first_line,this._$.first_column,$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]);
break;
case 74:
this.$ =new Declaracion_For(this._$.first_line,this._$.first_column,$$[$0-3],$$[$0-2],$$[$0]);
break;
case 75:
this.$ =new Asignacion(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0]);
break;
case 76:
this.$ =new Asignacion(this._$.first_line,this._$.first_column,$$[$0],null);
break;
case 77: case 78:
this.$ =new Increment_Decrements(this._$.first_line,this._$.first_column,$$[$0-1],$$[$0]);
break;
case 79: case 80:
this.$ =new Increment_Decrements(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0-1]);
break;
case 81:
this.$ =new Do_While(this._$.first_line,this._$.first_column,$$[$0-4],$$[$0-3],$$[$0-1]);
break;
case 82:
this.$= new Sout(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0-2]);

break;
case 83:
this.$ = $$[$0] ; 
break;
case 85:
this.$= new Whiles(this._$.first_line,this._$.first_column,$$[$0-1],$$[$0]);
break;
case 86:
this.$ =new Ifs(this._$.first_line,this._$.first_column,0,$$[$0-1],$$[$0],[]);
break;
case 87:
this.$= new Ifs(this._$.first_line,this._$.first_column,0,$$[$0-3],$$[$0-2],$$[$0]);
break;
case 88:
this.$=new Ifs(this._$.first_line,this._$.first_column,1,$$[$0-3],$$[$0-2],[$$[$0]]);
break;
case 92:
this.$= new Operaciones(this._$.first_line,this._$.first_column,null,$$[$0-1],$$[$0]);
break;
case 93:
this.$ =new Operaciones(this._$.first_line,this._$.first_column,null,$$[$0-1],$$[$0]);
break;
case 94: case 95: case 96: case 97:
this.$ =new Operaciones(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0-1],$$[$0]);
break;
case 98: case 99:
this.$= new Operaciones(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0-1],$$[$0]);
break;
case 100:
this.$ =new Condicionales(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0-1],$$[$0]);
break;
case 101:
this.$ = new Condicionales(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0-1],$$[$0]);
break;
case 102: case 106: case 107:
this.$= new Condicionales(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0-1],$$[$0]);
break;
case 103:
this.$ =new Condicionales(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0-1],$$[$0]);  
break;
case 104: case 105:
this.$ =new Condicionales(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 108:
 this.$ = new Dato_Exp(this._$.first_line, this._$.first_column,"Double", Number($$[$0])); 
break;
case 109:
 this.$ = new Dato_Exp( this._$.first_line, this._$.first_column,"Boolean", true); 
break;
case 110:
  this.$ = new Dato_Exp(this._$.first_line, this._$.first_column,"Boolean", false); 
break;
case 111:
  this.$ = new Dato_Exp(this._$.first_line, this._$.first_column,"String", $$[$0].replace(/\"/g,"")); 
break;
case 112:
 this.$ = $$[$0]
break;
case 113:
 this.$ = new Dato_Exp( this._$.first_line, this._$.first_column,"char", $$[$0].replace(/\'/g,"")); 
break;
case 114:
 this.$ = new Dato_Exp( this._$.first_line, this._$.first_column,"int",Number($$[$0]) );console.log("probando un") 
break;
case 115:
 this.$ = $$[$0-1]; 
break;
case 120:
this.$ =new LlamadaMetodo(this._$.first_line,this._$.first_column,$$[$0-4],$$[$0-2]);
break;
case 121:
this.$= new LlamadaMetodo(this._$.first_line,this._$.first_column,$$[$0-3],[]);
break;
case 122:
this.$= new LlamadaMetodo(this._$.first_line,this._$.first_column,$$[$0-3],$$[$0-1]);
break;
case 123:
this.$= new LlamadaMetodo(this._$.first_line,this._$.first_column,$$[$0-2],null);
break;
case 124:
this.$ =new Id_Solo(this._$.first_line,this._$.first_column,$$[$0]);
break;
case 125:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 127:
this.$= new DeclaracionMF(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0-1],$$[$0]);
break;
case 128:
 $$[$0-2].push( $$[$0]); this.$ = $$[$0-2]; 
break;
case 130:
 $$[$0-3].push(new Parametro(this._$.first_line , this._$.first_column,$$[$0-2],$$[$0],$$[$0-1])); this.$ = $$[$0-3]; 
break;
case 131:
 this.$ = [new Parametro( this._$.first_line , this._$.first_column,"",$$[$0] , null)]; 
break;
case 132:
 this.$ = [new Parametro( this._$.first_line , this._$.first_column,"",$$[$01] , $$[$0])]; 
break;
case 133:
this.$ = new Continues( $$[$0-1], this._$.first_line, this._$.first_column);
break;
case 134:
this.$ = new ReturnM($$[$0-1], this._$.first_line , this._$.first_column);
break;
case 135:
this.$ = new ReturnF( this._$.first_line , this._$.first_column,$$[$0-1]); console.log("return F")
break;
case 136:
this.$=new Break(this._$.first_line,this._$.first_column,$$[$0-1]);
break;
}
},
table: [{1:[2,2],3:1,4:2,5:[1,7],6:3,7:4,8:5,9:6,10:$V0,11:$V1,13:$V2},{1:[3]},{5:[1,11],6:12,7:4,8:5,9:6,10:$V0,11:$V1,13:$V2},o($V3,[2,4]),o($V3,[2,5]),o($V3,[2,6]),o($V3,[2,7]),o($V3,$V4),{14:[1,14],29:[1,13]},o($V5,[2,9]),o($V5,[2,10]),o($V3,$V4,{1:[2,1]}),o($V3,[2,3]),{15:[1,15]},{15:[1,16]},{17:[1,18],30:17},{16:19,17:[1,20]},o($V3,[2,26]),{9:29,10:$V0,11:$V1,13:$V6,15:$V7,19:[1,22],21:26,24:$V8,31:21,32:23,34:27,37:$V9,42:28,63:$Va,64:$Vb,65:$Vc,66:$Vd},o($V3,[2,13]),{9:41,10:$V0,11:$V1,13:$Ve,18:36,19:[1,37],20:38,21:40,37:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd},{9:29,10:$V0,11:$V1,13:$V6,15:$V7,19:[1,42],21:26,24:$V8,32:43,34:27,37:$V9,42:28,63:$Va,64:$Vb,65:$Vc,66:$Vd},o($V3,[2,28]),o($Vf,[2,30]),{21:45,24:[1,44],35:[1,46],37:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd},{15:[1,47]},{15:[1,48],45:49,48:50,49:51},o($Vf,[2,35]),{27:[1,52]},o($Vf,[2,38]),{22:$Vg,27:$Vh,43:[1,53]},{15:[2,68]},{15:[2,69]},{15:[2,70]},{15:[2,71]},{15:[2,72]},{9:41,10:$V0,11:$V1,13:$Ve,19:[1,55],20:56,21:40,37:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd},o($V3,[2,15]),o($Vi,[2,17]),{21:57,24:[1,58],37:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd},{15:[1,59]},o($Vi,[2,21]),o($V3,[2,27]),o($Vf,[2,29]),{15:[1,60]},{15:[1,61],45:62,48:50,49:51},{24:[1,63]},{22:[1,64]},o($Vj,$Vk,{22:[1,65],43:$Vl,69:$Vm,70:$Vn}),{27:[1,69],47:$Vo},o($Vj,[2,44]),o($Vj,[2,47]),o($Vf,[2,37]),{15:$Vp,22:$Vq,42:78,44:71,49:82,82:$Vr,83:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{15:$Vp,22:$Vq,26:[1,85],42:78,44:86,49:82,82:$Vr,83:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,105:84},o($V3,[2,14]),o($Vi,[2,16]),{15:[1,87]},{15:[1,88]},{22:[1,89]},{22:[1,90]},o($Vj,$Vk,{22:[1,91],43:$Vl,69:$Vm,70:$Vn}),{27:[1,92],47:$Vo},{36:[1,93]},{15:$Vp,21:97,22:$Vq,25:95,26:$Vz,33:94,37:$V9,42:78,44:98,49:82,63:$Va,64:$Vb,65:$Vc,66:$Vd,82:$Vr,83:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{15:$Vp,21:97,22:$Vq,25:95,26:$Vz,33:99,37:$V9,42:78,44:98,49:82,63:$Va,64:$Vb,65:$Vc,66:$Vd,82:$Vr,83:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{15:$Vp,22:$Vq,42:78,44:100,49:82,82:$Vr,83:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},o($VA,[2,77]),o($VA,[2,78]),o($Vf,[2,41]),{15:$VB,48:101,49:51},{27:[1,103],82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP},{15:$Vp,22:$Vq,42:78,44:118,49:82,82:$Vr,83:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{15:$Vp,22:$Vq,42:78,44:119,49:82,82:$Vr,83:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},o($VA,[2,108]),o($VA,[2,109]),o($VA,[2,110]),o($VA,[2,111]),o($VA,[2,112]),o($VA,[2,113]),o($VA,[2,114]),{15:$Vp,22:$Vq,42:78,44:120,49:82,82:$Vr,83:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},o($VA,[2,116]),o($VA,$Vh,{22:$Vg,69:$Vm,70:$Vn}),{26:[1,121],47:$VQ},o($VA,$VR),o($VS,[2,126],{82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP}),{22:[1,123]},{22:[1,124]},{15:$Vp,21:97,22:$Vq,23:125,25:126,26:$VT,37:$V9,42:78,44:98,49:82,63:$Va,64:$Vb,65:$Vc,66:$Vd,82:$Vr,83:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{15:$Vp,21:97,22:$Vq,25:95,26:$Vz,33:128,37:$V9,42:78,44:98,49:82,63:$Va,64:$Vb,65:$Vc,66:$Vd,82:$Vr,83:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{15:$Vp,21:97,22:$Vq,25:95,26:$Vz,33:129,37:$V9,42:78,44:98,49:82,63:$Va,64:$Vb,65:$Vc,66:$Vd,82:$Vr,83:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},o($Vf,[2,40]),{22:[1,130]},o($Vf,[2,32]),{26:[1,131],47:$VU},{17:$VV,27:[1,134],41:133},{15:[1,136]},o($VS,[2,132],{82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP}),o($Vf,[2,34]),o($Vj,[2,45],{82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP}),o($Vj,[2,43]),o($Vj,$Vk,{43:$Vl,69:$Vm,70:$Vn}),o($Vf,[2,39]),{15:$Vp,22:$Vq,42:78,44:137,49:82,82:$Vr,83:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{15:$Vp,22:$Vq,42:78,44:138,49:82,82:$Vr,83:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{15:$Vp,22:$Vq,42:78,44:139,49:82,82:$Vr,83:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{15:$Vp,22:$Vq,42:78,44:140,49:82,82:$Vr,83:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{15:$Vp,22:$Vq,42:78,44:141,49:82,82:$Vr,83:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{15:$Vp,22:$Vq,42:78,44:142,49:82,82:$Vr,83:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{15:$Vp,22:$Vq,42:78,44:143,49:82,82:$Vr,83:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{15:$Vp,22:$Vq,42:78,44:144,49:82,82:$Vr,83:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{15:$Vp,22:$Vq,42:78,44:145,49:82,82:$Vr,83:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{15:$Vp,22:$Vq,42:78,44:146,49:82,82:$Vr,83:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{15:$Vp,22:$Vq,42:78,44:147,49:82,82:$Vr,83:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{15:$Vp,22:$Vq,42:78,44:148,49:82,82:$Vr,83:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{15:$Vp,22:$Vq,42:78,44:149,49:82,82:$Vr,83:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{15:$Vp,22:$Vq,42:78,44:150,49:82,82:$Vr,83:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},o($VA,[2,92]),o($VA,[2,93]),{26:[1,151],82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP},o($VA,$VW),{15:$Vp,22:$Vq,42:78,44:152,49:82,82:$Vr,83:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{15:$Vp,21:97,22:$Vq,23:153,25:126,26:$VT,37:$V9,42:78,44:98,49:82,63:$Va,64:$Vb,65:$Vc,66:$Vd,82:$Vr,83:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{15:$Vp,21:97,22:$Vq,23:154,25:126,26:$VT,37:$V9,42:78,44:98,49:82,63:$Va,64:$Vb,65:$Vc,66:$Vd,82:$Vr,83:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},o($Vi,[2,19]),{26:[1,155],47:$VU},{27:[1,156]},o($Vf,[2,31]),o($Vf,[2,33]),{37:[1,157]},{17:$VV,27:[1,159],41:158},{21:160,37:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd},o($Vf,[2,50]),o($Vf,[2,51]),{9:165,10:$V0,11:$V1,15:$VX,19:[1,162],21:184,37:$V9,42:170,46:172,50:161,51:163,52:164,53:166,54:167,55:168,56:169,57:171,58:173,59:174,60:175,61:176,62:177,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$VY,71:$VZ,72:$V_,74:$V$,80:$V01,108:$V11,109:$V21,110:$V31},o($VS,[2,131]),o($V41,[2,94],{85:$VE,86:$VF,87:$VG,88:$VH}),o($V41,[2,95],{85:$VE,86:$VF,87:$VG,88:$VH}),o($V51,[2,96],{87:$VG,88:$VH}),o($V51,[2,97],{87:$VG,88:$VH}),o($VA,[2,98]),o($VA,[2,99]),o($V61,[2,100],{82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH}),o($V61,[2,101],{82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH}),o($V61,[2,102],{82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH}),o($V61,[2,103],{82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH}),o($V71,[2,104],{82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL}),o($V71,[2,105],{82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL}),o([26,27,47,95],[2,106],{82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,96:$VP}),o([26,27,47,95,96],[2,107],{82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN}),o($VA,[2,115]),o($VS,[2,125],{82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP}),o($Vi,[2,18]),o($Vi,[2,20]),{27:[1,188]},o($Vi,[2,23]),{38:[1,189]},o($Vf,[2,48]),o($Vf,[2,49]),{15:[1,190]},{9:165,10:$V0,11:$V1,15:$VX,19:[1,191],21:184,37:$V9,42:170,46:172,51:192,52:164,53:166,54:167,55:168,56:169,57:171,58:173,59:174,60:175,61:176,62:177,63:$Va,64:$Vb,65:$Vc,66:$Vd,67:$VY,71:$VZ,72:$V_,74:$V$,80:$V01,108:$V11,109:$V21,110:$V31},o($V81,[2,91]),o($V91,[2,53]),o($V91,[2,54]),o($V91,[2,55]),o($V91,[2,56]),o($V91,[2,57]),o($V91,[2,58]),o($V91,[2,59]),o($V91,[2,60]),o($V91,[2,61]),o($V91,[2,62]),o($V91,[2,63]),o($V91,[2,64]),o($V91,[2,65]),o($V91,[2,66]),o($V91,[2,67]),{75:[1,193]},{22:$Va1,73:194},{22:$Va1,73:196},{17:$VV,41:197},{22:[1,198]},o($V91,$Vh,{22:[1,199],43:[1,200],69:[1,203],70:[1,204],103:[1,201],104:[1,202]}),{15:$VB,45:205,48:50,49:51},{27:[1,206]},{15:$Vp,22:$Vq,27:[1,208],42:78,44:207,49:82,82:$Vr,83:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{27:[1,209]},o($Vi,[2,22]),{39:[1,210]},o($VS,[2,130]),o($V81,[2,90]),o($V91,[2,52]),{76:[1,211]},{17:$VV,41:212},{15:$Vp,22:$Vq,42:78,44:213,49:82,82:$Vr,83:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{17:$VV,41:214},{72:[1,215]},{15:[1,218],21:217,37:$V9,63:$Va,64:$Vb,65:$Vc,66:$Vd,68:216},{15:$Vp,22:$Vq,26:[1,220],42:78,44:86,49:82,82:$Vr,83:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,105:219},{15:$Vp,22:$Vq,42:78,44:221,49:82,82:$Vr,83:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{15:$Vp,22:$Vq,42:78,44:222,49:82,82:$Vr,83:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{15:$Vp,22:$Vq,42:78,44:223,49:82,82:$Vr,83:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{27:[1,224]},{27:[1,225]},{27:[1,226],47:$Vo},o($V91,[2,133]),{27:[1,227],82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP},o($V91,[2,134]),o($V91,[2,136]),{40:[1,228]},{75:[1,229]},o($V91,[2,85]),{26:[1,230],82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP},o($V91,[2,86],{81:[1,231]}),{22:$Va1,73:232},{27:[1,233]},{15:[1,234]},{43:[1,235]},{26:[1,236],47:$VQ},o($V91,$VR,{27:[1,237]}),{27:[1,238],82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP},{27:[1,239],82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP},{27:[1,240],82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP},o($V91,[2,79]),o($V91,[2,80]),o($V91,[2,42]),o($V91,[2,135]),{26:[1,241]},{77:242,78:[1,243],79:[1,244]},o([17,27],[2,89]),{17:$VV,41:245,54:246,80:$V01},{27:[1,247]},{15:$Vp,22:$Vq,42:78,44:248,49:82,82:$Vr,83:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{27:[2,76],43:[1,249]},{15:$Vp,22:$Vq,42:78,44:250,49:82,82:$Vr,83:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},o($V91,$VW,{27:[1,251]}),o($V91,[2,121]),o($V91,[2,117]),o($V91,[2,118]),o($V91,[2,119]),{17:$VV,41:252},{22:[1,253]},{22:[2,83]},{22:[2,84]},o($V91,[2,87]),o($V91,[2,88]),o($V91,[2,81]),{27:[1,254],82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP},{15:$Vp,22:$Vq,42:78,44:255,49:82,82:$Vr,83:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{27:[2,75],82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP},o($V91,[2,120]),o($Vf,[2,36]),{15:$Vp,22:$Vq,42:78,44:256,49:82,82:$Vr,83:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{15:[1,258],49:257},{27:[2,74],82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP},{26:[1,259],82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP},{26:[1,260]},{69:$Vm,70:$Vn},{27:[1,261]},{17:$VV,41:262},o($V91,[2,82]),o($V91,[2,73])],
defaultActions: {31:[2,68],32:[2,69],33:[2,70],34:[2,71],35:[2,72],243:[2,83],244:[2,84]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  const {Arbol} = require('../Simbols/Arbol');
   const {Class} =require ('../ClasesParaArbol/Class')
   const {Interface} =require ('../ClasesParaArbol/Interface')
   const {FunctionInterface}= require('../ClasesParaArbol/FuncionInterface')
   const {Metodo_FuncionIN} =require('../ClasesParaArbol/MetodoOFuncion_Interface')
   const {Metodo_C} =require('../ClasesParaArbol/Metodo_C')
   const {Funcion_C} =require('../ClasesParaArbol/Funcion_C')
   const {DeclaracionAfuera} =require('../ClasesParaArbol/DeclaracionAfuera')
   const {Main} =require('../ClasesParaArbol/Main')
   const {Metodo_Fc} =require('../ClasesParaArbol/Metodo_Fc')
   const {For_alv}=require('../ClasesParaArbol/For')
   const {Declaracion_For}=require('../ClasesParaArbol/Declaracion_For')
   
   const {Asignacion}=require('../ClasesParaArbol/Asignacion')
   const {Do_While}=require('../ClasesParaArbol/Do_While')
    const {Comentarios}=require('../ClasesParaArbol/Comentarios')
 
   const {Increment_Decrements}=require('../ClasesParaArbol/Increment_Decrement')
   const {Sout}=require('../ClasesParaArbol/Sout')
   const {Whiles}=require('../ClasesParaArbol/While')
   const {Ifs}=require('../ClasesParaArbol/IF')
   const {Operaciones}=require('../ClasesParaArbol/Operaciones')
    const {Id_Solo}=require('../ClasesParaArbol/Id_Solo')
    const {ReturnM}=require('../ClasesParaArbol/ReturnM')
  const {ReturnF}=require('../ClasesParaArbol/ReturnF')
  const {Coma}=require('../ClasesParaArbol/Coma')
  
   const {Condicionales}=require('../ClasesParaArbol/Condicionales') 
   const {Dato_Exp}=require('../ClasesParaArbol/Dato_Exp') 

   const {Switchs}=require('../ClasesParaArbol/Switch') 
   const {Case}=require('../ClasesParaArbol/Case') 
   const {Default}=require('../ClasesParaArbol/Default') 
    const {Break}=require('../ClasesParaArbol/Break') 
   const {Exp_Case}=require('../ClasesParaArbol/Exp_Case') 
    const {LlamadaMetodo}=require('../ClasesParaArbol/LlamadaMetodo') 
    const {DeclaracionMF}=require('../ClasesParaArbol/DeclaracionMF') 
      const {Parametro}=require('../ClasesParaArbol/Parametro') 
      const {Continues}=require('../ClasesParaArbol/Continue') 
      const {TipoV}=require('../ClasesParaArbol/TipoV') 
         let CErrores=require('../ManejoErrores/Errores');
    let CNodoError=require('../ManejoErrores/NodoError');
    
         const{Errores} =require('../ManejoErrores/Errores');

         const{Token} =require('../ManejoErrores/Token');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// cualquier cosa xd
break;
case 1:$$= new Token(yy_.yytext,"comentario de Linea ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 10 
break;
case 2:$$= new Token(yy_.yytext,"comentarioMulti ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 11 
break;
case 3:$$= new Token(yy_.yytext,"char ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 101 
break;
case 4:$$= new Token(yy_.yytext,"cadena ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 100 
break;
case 5:$$= new Token(yy_.yytext,"decimal ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 97 
break;
case 6:$$= new Token(yy_.yytext,"entero ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 102 
break;
case 7:$$= new Token(":","dos puntos ", yy_.yylloc.first_column,yy_.yylloc.first_line); return ':' 
break;
case 8:$$= new Token("/","barra ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 86 
break;
case 9:$$= new Token(";","punto y coma ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 27 
break;
case 10:$$= new Token("-=","menos igual ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 104 
break;
case 11:$$= new Token("--","decremento ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 70 
break;
case 12:$$= new Token("-","menos", yy_.yylloc.first_column,yy_.yylloc.first_line); return 82 
break;
case 13:$$= new Token("++","plus plus ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 69 
break;
case 14:$$= new Token("+=","mas igual ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 103 
break;
case 15:$$= new Token("+","mas  ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 84 
break;
case 16:$$= new Token("*","asterisco ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 85 
break;
case 17:$$= new Token("^","elevado ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 88 
break;
case 18:$$= new Token("%","porcentaje ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 87 
break;
case 19:$$= new Token(".","punto", yy_.yylloc.first_column,yy_.yylloc.first_line); return 75 
break;
case 20:$$= new Token("<=","menor igual ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 92 
break;
case 21:$$= new Token(">=","mayor igual ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 91 
break;
case 22:$$= new Token("<","menor ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 89 
break;
case 23:$$= new Token(">","mayor ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 90 
break;
case 24:$$= new Token("==","doble igual ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 93 
break;
case 25:$$= new Token("!=","diferente ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 94 
break;
case 26:$$= new Token("||","O ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 95 
break;
case 27:$$= new Token("&&","Y ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 96 
break;
case 28:$$= new Token("!","admiracion ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 83 
break;
case 29:$$= new Token("="," igual ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 43 
break;
case 30:$$= new Token(",","coma", yy_.yylloc.first_column,yy_.yylloc.first_line); return 47 
break;
case 31:$$= new Token("(" , "parentesis abierto", yy_.yylloc.first_column,yy_.yylloc.first_line); return 22 
break;
case 32:$$= new Token(")","parentesis cerrado", yy_.yylloc.first_column,yy_.yylloc.first_line); return 26 
break;
case 33:$$= new Token("[" , "CORCHETE abierto", yy_.yylloc.first_column,yy_.yylloc.first_line); return 38 
break;
case 34:$$= new Token("]","Corchete cerrado", yy_.yylloc.first_column,yy_.yylloc.first_line); return 39 
break;
case 35:$$= new Token("{","Llave abierta", yy_.yylloc.first_column,yy_.yylloc.first_line); return 17 
break;
case 36:$$= new Token("}",  "llave cerrada", yy_.yylloc.first_column,yy_.yylloc.first_line); return 19 
break;
case 37:$$= new Token("public","palabra reservada public", yy_.yylloc.first_column,yy_.yylloc.first_line); return 13 
break;
case 38:$$= new Token("static","palabra reservada static", yy_.yylloc.first_column,yy_.yylloc.first_line); return 35 
break;
case 39:$$= new Token("main","palabra reservada main", yy_.yylloc.first_column,yy_.yylloc.first_line); return 36 
break;
case 40:$$= new Token("println","palabra reservada println", yy_.yylloc.first_column,yy_.yylloc.first_line); return 78 
break;
case 41:$$= new Token("print","palabra reservada print", yy_.yylloc.first_column,yy_.yylloc.first_line); return 79 
break;
case 42:$$= new Token("out","palabra reservada out", yy_.yylloc.first_column,yy_.yylloc.first_line); return 76 
break;
case 43:$$= new Token("System","palabra reservada System", yy_.yylloc.first_column,yy_.yylloc.first_line); return 74 
break;
case 44:$$= new Token("void","palabra reservada void", yy_.yylloc.first_column,yy_.yylloc.first_line); return 24 
break;
case 45:$$= new Token("args","palabra reservada args", yy_.yylloc.first_column,yy_.yylloc.first_line); return 40 
break;
case 46:$$= new Token("return","palabra reservada return", yy_.yylloc.first_column,yy_.yylloc.first_line); return 109 
break;
case 47:$$= new Token("if","palabra reservada if", yy_.yylloc.first_column,yy_.yylloc.first_line); return 80 
break;
case 48:$$= new Token("else","palabra reservada else", yy_.yylloc.first_column,yy_.yylloc.first_line); return 81 
break;
case 49:return 'switch'
break;
case 50:return 'case'
break;
case 51:return 'default' 
break;
case 52:$$= new Token("break","palabra reservada break", yy_.yylloc.first_column,yy_.yylloc.first_line); return 110 
break;
case 53:$$= new Token("continue","palabra reservada continue", yy_.yylloc.first_column,yy_.yylloc.first_line); return 108 
break;
case 54:$$= new Token("while","palabra reservada while", yy_.yylloc.first_column,yy_.yylloc.first_line); return 72 
break;
case 55:$$= new Token("do","palabra reservada do", yy_.yylloc.first_column,yy_.yylloc.first_line); return 71 
break;
case 56:$$= new Token("for","palabra reservada for", yy_.yylloc.first_column,yy_.yylloc.first_line); return 67 
break;
case 57:$$= new Token("false","palabra reservada false", yy_.yylloc.first_column,yy_.yylloc.first_line); return 99 
break;
case 58:$$= new Token("true","palabra reservada true", yy_.yylloc.first_column,yy_.yylloc.first_line); return 98 
break;
case 59:$$= new Token("Class","Palabra Reservada clase: ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 29 
break;
case 60:$$= new Token("interface","palabra reservada interface", yy_.yylloc.first_column,yy_.yylloc.first_line); return 14 
break;
case 61:$$= new Token("char","palabra reservada char", yy_.yylloc.first_column,yy_.yylloc.first_line); return 66 
break;
case 62:$$= new Token("double","palabra reservada double", yy_.yylloc.first_column,yy_.yylloc.first_line); return 65 
break;
case 63:$$= new Token("int","palabra reservada int", yy_.yylloc.first_column,yy_.yylloc.first_line); return 63 
break;
case 64:$$= new Token("String","palabra reservada String", yy_.yylloc.first_column,yy_.yylloc.first_line); return 37 
break;
case 65:$$= new Token("boolean","palabra reservada boolean", yy_.yylloc.first_column,yy_.yylloc.first_line); return 64 
break;
case 66:$$= new Token(yy_.yytext,"id", yy_.yylloc.first_column,yy_.yylloc.first_line); return 15 
break;
case 67:return 5
break;
case 68: $$ = new Error("LEXICO","No se esperaba el caracter: "+yy_.yytext,yy_.yylloc.first_column,yy_.yylloc.first_line);  console.error('Este es un error léxico: ' + yy_.yytext + '  en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:(('[^☼]')))/,/^(?:(("[^"]*")))/,/^(?:(([0-9]+)(\.([0-9]+))?))/,/^(?:([0-9]+))/,/^(?::)/,/^(?:\/)/,/^(?:;)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\*)/,/^(?:\^)/,/^(?:%)/,/^(?:\.)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:=)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:public\b)/,/^(?:static\b)/,/^(?:main\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:out\b)/,/^(?:System\b)/,/^(?:void\b)/,/^(?:args\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:false\b)/,/^(?:true\b)/,/^(?:class\b)/,/^(?:interface\b)/,/^(?:char\b)/,/^(?:double\b)/,/^(?:int\b)/,/^(?:String\b)/,/^(?:boolean\b)/,/^(?:(([a-zA-Z_])[a-zA-Z0-9_]*))/,/^(?:$)/,/^(?:)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GramaticaPrueba;
exports.Parser = GramaticaPrueba.Parser;
exports.parse = function () { return GramaticaPrueba.parse.apply(GramaticaPrueba, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}