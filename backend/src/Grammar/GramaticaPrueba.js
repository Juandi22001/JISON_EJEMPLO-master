/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GramaticaPrueba = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,10],$V2=[1,8],$V3=[5,10,11,13],$V4=[2,8],$V5=[5,10,11,13,15,19,24,37,61,62,63,64,65,70,71,73,79,104,105,106],$V6=[1,24],$V7=[1,30],$V8=[1,25],$V9=[1,32],$Va=[1,31],$Vb=[1,33],$Vc=[1,34],$Vd=[1,35],$Ve=[1,39],$Vf=[10,11,13,15,19,24,37,61,62,63,64],$Vg=[1,52],$Vh=[2,116],$Vi=[10,11,13,19,37,61,62,63,64],$Vj=[27,45,68,69,103],$Vk=[2,121],$Vl=[1,67],$Vm=[1,66],$Vn=[1,68],$Vo=[1,69],$Vp=[1,65],$Vq=[1,82],$Vr=[1,80],$Vs=[1,71],$Vt=[1,72],$Vu=[1,73],$Vv=[1,74],$Vw=[1,75],$Vx=[1,76],$Vy=[1,78],$Vz=[1,79],$VA=[1,95],$VB=[10,11,13,15,19,24,37,61,62,63,64,65,70,71,73,79,104,105,106],$VC=[1,105],$VD=[1,104],$VE=[1,106],$VF=[1,107],$VG=[1,108],$VH=[1,109],$VI=[1,110],$VJ=[1,111],$VK=[1,112],$VL=[1,113],$VM=[1,114],$VN=[1,115],$VO=[1,116],$VP=[1,117],$VQ=[26,27,81,83,84,85,86,87,88,89,90,91,92,93,94,95,103],$VR=[1,121],$VS=[1,122],$VT=[1,124],$VU=[2,115],$VV=[26,103],$VW=[1,129],$VX=[1,134],$VY=[1,137],$VZ=[2,114],$V_=[1,186],$V$=[1,185],$V01=[1,184],$V11=[1,182],$V21=[1,181],$V31=[1,183],$V41=[1,188],$V51=[1,189],$V61=[1,190],$V71=[26,27,81,83,88,89,90,91,92,93,94,95,103],$V81=[26,27,81,83,84,85,88,89,90,91,92,93,94,95,103],$V91=[26,27,88,89,90,91,92,93,94,95,103],$Va1=[26,27,92,93,94,95,103],$Vb1=[10,11,13,15,19,24,37,61,62,63,64,65,70,71,73,79,80,104,105,106],$Vc1=[10,11,15,19,37,61,62,63,64,65,70,71,73,79,104,105,106],$Vd1=[1,198];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"ComienzoA":4,"EOF":5,"InstruccionesA":6,"SentenciaClase":7,"SentenciaInterface":8,"COMENTARIOS":9,"ComentarioLinea":10,"ComentarioMulti":11,"ListaInterfaces":12,"public":13,"interface":14,"id":15,"InicioInterface":16,"{":17,"InterfaceMenu":18,"}":19,"DeclaracionInterface":20,"TIPO":21,"(":22,"Metodos_FuncionesI":23,"void":24,"Parametros_Tipo":25,")":26,";":27,"ListaClases":28,"class":29,"InicioClase":30,"MenuClase":31,"DeclaracionClase":32,"Metodos_Funciones":33,"DECLARACION":34,"static":35,"main":36,"String":37,"[":38,"]":39,"args":40,"BlockInstrucciones":41,"L_ids":42,"AsignacionV_P":43,"EXPRESION_METODO":44,"=":45,"EXPRESION":46,"Instrucciones":47,"INSTRUCCION":48,"SOUT":49,"WHILE":50,"IF":51,"DOWHILE":52,"FOR":53,"AsignacionV_P_SIMPLE":54,"DeclaracionM_Funciones":55,"CONTINUE":56,"Return_F":57,"Return_M":58,"BREAK":59,"Increment_Decrement2":60,"int":61,"boolean":62,"double":63,"char":64,"for":65,"Declaracion_f":66,"Increment_Decrement":67,"incremento":68,"decremento":69,"do":70,"while":71,"Condicionales":72,"System":73,".":74,"out":75,"TipoPrint":76,"println":77,"print":78,"if":79,"else":80,"-":81,"!":82,"+":83,"*":84,"/":85,"%":86,"^":87,"<":88,">":89,">=":90,"<=":91,"==":92,"!=":93,"||":94,"&&":95,"decimal":96,"true":97,"false":98,"cadena":99,"caracter":100,"entero":101,"Llamar_Metodo_Exp":102,",":103,"continue":104,"return":105,"break":106,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"ComentarioLinea",11:"ComentarioMulti",13:"public",14:"interface",15:"id",17:"{",19:"}",22:"(",24:"void",26:")",27:";",29:"class",35:"static",36:"main",37:"String",38:"[",39:"]",40:"args",45:"=",61:"int",62:"boolean",63:"double",64:"char",65:"for",68:"incremento",69:"decremento",70:"do",71:"while",73:"System",74:".",75:"out",77:"println",78:"print",79:"if",80:"else",81:"-",82:"!",83:"+",84:"*",85:"/",86:"%",87:"^",88:"<",89:">",90:">=",91:"<=",92:"==",93:"!=",94:"||",95:"&&",96:"decimal",97:"true",98:"false",99:"cadena",100:"caracter",101:"entero",103:",",104:"continue",105:"return",106:"break"},
productions_: [0,[3,2],[3,0],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[9,1],[9,1],[12,2],[12,1],[8,4],[16,3],[16,2],[18,2],[18,1],[20,5],[20,4],[20,5],[20,1],[23,3],[23,2],[28,2],[28,1],[7,4],[30,3],[30,2],[31,2],[31,1],[32,5],[32,4],[32,5],[32,4],[32,1],[32,11],[32,3],[32,2],[32,1],[32,4],[34,4],[33,3],[33,3],[33,2],[33,2],[47,2],[47,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[21,1],[21,1],[21,1],[21,1],[21,1],[53,9],[66,4],[66,3],[66,2],[67,2],[67,2],[60,3],[60,3],[52,5],[49,9],[76,1],[76,1],[50,3],[51,3],[51,5],[51,5],[72,3],[41,3],[41,2],[46,2],[46,2],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,3],[46,1],[54,4],[54,5],[54,4],[44,4],[44,3],[44,1],[102,3],[102,1],[55,3],[42,3],[42,1],[43,3],[43,1],[43,2],[43,2],[25,4],[25,2],[25,1],[56,2],[58,2],[57,3],[59,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return this.$
break;
case 3:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1]
break;
case 4:
this.$ = [$$[$0]]
break;
case 5:
this.$ = new Arbol($$[$0]); this.$= $$[$0] ;
break;
case 6:
this.$ = new Arbol($$[$0]); this.$= $$[$0];
break;
case 7: case 21: case 35: case 39: case 49: case 54: case 110:
this.$=$$[$0]
break;
case 8:
this.$ = new Arbol($$[$0]); 
break;
case 9: case 10:
this.$ =new Comentarios(this._$.first_line,this._$.first_column,$$[$0]);
break;
case 11: case 16: case 24: case 29: case 46:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 12: case 17: case 25: case 30: case 47: case 118: case 121:
 this.$ = [$$[$0]]; 
break;
case 13:
this.$ =new Interface(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0-1]);
break;
case 14: case 27: case 83: case 84:
this.$ = $$[$0-1];
break;
case 15: case 28: case 85:
this.$ = [];
break;
case 18:
this.$ =new FunctionInterface(this._$.first_line,this._$.first_column,$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1]);
break;
case 19:
this.$= new FunctionInterface(this._$.first_line,this._$.first_column,"-",$$[$0-2],$$[$0-1],$$[$0]);
break;
case 20:
this.$= new FunctionInterface(this._$.first_line,this._$.first_column,"-",$$[$0-3],$$[$0-2],$$[$0-1]);
break;
case 22:
this.$= new Metodo_FuncionIN(this._$.first_line,this._$.first_column,$$[$0-2]);
break;
case 23:
this.$= new Metodo_FuncionIN(this._$.first_line,this._$.first_column,[]);
break;
case 26:
this.$ =new Class(this._$.first_line,this._$.first_column,$$[$0-1],$$[$0]); console.log("en una clase") 
break;
case 31:
this.$ =new Metodo_C(this._$.first_line,this._$.first_column,$$[$0-4],$$[$0-3],$$[$0-2],$$[$0]);
break;
case 32:
this.$ =new Metodo_C(this._$.first_line,this._$.first_column,".",$$[$0-2],$$[$0-2],$$[$0]);
break;
case 33:
this.$ =new Funcion_C(this._$.first_line,this._$.first_column,$$[$0-4],$$[$0-3],$$[$0-2],$$[$0]);
break;
case 34:
this.$= new Funcion_C(this._$.first_line,this._$.first_column,".",$$[$0-3],$$[$0-2],$$[$0]);
break;
case 36:
this.$= new Main(this._$.first_line,this._$.first_column,$$[$0-7],$$[$0]);
break;
case 37:
this.$ =new DeclaracionAfuera(this._$.first_line,this._$.first_column,".",$$[$0-2],$$[$0-1],$$[$0]);
break;
case 38:
this.$=$$[$0-1]
break;
case 40: case 111:
this.$= new Asignacion(this._$.first_line,this._$.first_column,$$[$0-3],$$[$0-1]);
break;
case 41:
this.$ =new DeclaracionAfuera(this._$.first_line,this._$.first_column,$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
break;
case 42:
this.$= new Metodo_Fc(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0]);
break;
case 44: case 45:
this.$ =new Metodo_Fc(this._$.first_line,this._$.first_column,null,$$[$0]);
break;
case 48: case 50: case 51: case 52: case 53: case 55: case 56: case 58: case 59: case 78:
this.$ = $$[$0];
break;
case 57:
this.$ = $$[$0]; console.log("continue");
break;
case 60:
this.$ = $$[$0];console.log("break");
break;
case 61:
this.$=$$[$0];console.log("incremento")
break;
case 62: case 63: case 64: case 65: case 66:
this.$ = new TipoV($$[$0]);
break;
case 67:
this.$= new For_alv(this._$.first_line,this._$.first_column,$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]);
break;
case 68:
this.$ =new Declaracion_For(this._$.first_line,this._$.first_column,$$[$0-3],$$[$0-2],$$[$0]);
break;
case 69:
this.$ =new Asignacion(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0]);
break;
case 70:
this.$ =new Asignacion(this._$.first_line,this._$.first_column,$$[$0],null);
break;
case 71: case 72:
this.$ =new Increment_Decrements(this._$.first_line,this._$.first_column,$$[$0-1],$$[$0]);
break;
case 73: case 74:
this.$ =new Increment_Decrements(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0-1]);
break;
case 75:
this.$ =new Do_While(this._$.first_line,this._$.first_column,$$[$0-4],$$[$0-3],$$[$0-1]);
break;
case 76:
this.$= new Sout(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0-2]);

break;
case 77:
this.$ = $$[$0] ; 
break;
case 79:
this.$= new Whiles(this._$.first_line,this._$.first_column,$$[$0-1],$$[$0]);
break;
case 80:
this.$ =new Ifs(this._$.first_line,this._$.first_column,$$[$0-1],$$[$0],[]);
break;
case 81:
this.$= new Ifs(this._$.first_line,this._$.first_column,$$[$0-3],$$[$0-2],$$[$0-1]);
break;
case 82:
this.$=new Ifs(this._$.first_line,this._$.first_column,$$[$0-3],$$[$0-2],[$$[$0-1]]);
break;
case 86:
this.$= new Operaciones(this._$.first_line,this._$.first_column,null,$$[$0-1],$$[$0]);
break;
case 87:
this.$ =new Operaciones(this._$.first_line,this._$.first_column,null,$$[$0-1],$$[$0]);
break;
case 88: case 89: case 90: case 91:
this.$ =new Operaciones(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0-1],$$[$0]);
break;
case 92: case 93:
this.$= new Operaciones(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0-1],$$[$0]);
break;
case 94:
this.$ =new Condicionales(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0-1],$$[$0]);
break;
case 95:
this.$ = new Condicionales(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0-1],$$[$0]);
break;
case 96: case 100: case 101:
this.$= new Condicionales(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0-1],$$[$0]);
break;
case 97:
this.$ =new Condicionales(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0-1],$$[$0]);  
break;
case 98: case 99:
this.$ =new Condicionales(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 102:
 this.$ = new Dato_Exp(this._$.first_line, this._$.first_column,"Double", Number($$[$0])); 
break;
case 103:
 this.$ = new Dato_Exp( this._$.first_line, this._$.first_column,"Boolean", true); 
break;
case 104:
  this.$ = new Dato_Exp(this._$.first_line, this._$.first_column,"Boolean", false); 
break;
case 105:
  this.$ = new Dato_Exp(this._$.first_line, this._$.first_column,"String", $$[$0].replace(/\"/g,"")); 
break;
case 106:
 this.$ = $$[$0]
break;
case 107:
 this.$ = new Dato_Exp( this._$.first_line, this._$.first_column,"char", $$[$0].replace(/\'/g,"")); 
break;
case 108:
 this.$ = new Dato_Exp( this._$.first_line, this._$.first_column,"int",Number($$[$0]) );console.log("probando un") 
break;
case 109:
 this.$ = $$[$0-1]; 
break;
case 112:
this.$ =new LlamadaMetodo(this._$.first_line,this._$.first_column,$$[$0-4],$$[$0-2]);
break;
case 113:
this.$= new LlamadaMetodo(this._$.first_line,this._$.first_column,$$[$0-3],[]);
break;
case 114:
this.$= new LlamadaMetodo(this._$.first_line,this._$.first_column,$$[$0-3],$$[$0-1]);
break;
case 115:
this.$= new LlamadaMetodo(this._$.first_line,this._$.first_column,$$[$0-2],null);
break;
case 116:
this.$ =new Id_Solo(this._$.first_line,this._$.first_column,$$[$0]);
break;
case 117:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 119:
this.$= new DeclaracionMF(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0-1],$$[$0]);
break;
case 120:
 $$[$0-2].push( $$[$0]); this.$ = $$[$0-2]; 
break;
case 122: case 124: case 125:
this.$ = $$[$0-1] 
break;
case 123:
this.$ = null;
break;
case 126:
 $$[$0-3].push(new Parametro(this._$.first_line , this._$.first_column,$$[$0-1],$$[$0])); this.$ = $$[$0-3]; 
break;
case 127:
 this.$ = [new Parametro( this._$.first_line , this._$.first_column,$$[$0] , null)]; 
break;
case 128:
 this.$ = [new Parametro( this._$.first_line , this._$.first_column,"" , $$[$0])]; 
break;
case 129:
this.$ = new Continues( $$[$0-1], this._$.first_line, this._$.first_column);
break;
case 130:
this.$ = new ReturnM($$[$0-1], this._$.first_line , this._$.first_column);
break;
case 131:
this.$ = new ReturnF( this._$.first_line , this._$.first_column,$$[$0-1]);
break;
case 132:
this.$=new Break(this._$.first_line,this._$.first_column,$$[$0-1]);
break;
}
},
table: [{1:[2,2],3:1,4:2,5:[1,7],6:3,7:4,8:5,9:6,10:$V0,11:$V1,13:$V2},{1:[3]},{5:[1,11],6:12,7:4,8:5,9:6,10:$V0,11:$V1,13:$V2},o($V3,[2,4]),o($V3,[2,5]),o($V3,[2,6]),o($V3,[2,7]),o($V3,$V4),{14:[1,14],29:[1,13]},o($V5,[2,9]),o($V5,[2,10]),o($V3,$V4,{1:[2,1]}),o($V3,[2,3]),{15:[1,15]},{15:[1,16]},{17:[1,18],30:17},{16:19,17:[1,20]},o($V3,[2,26]),{9:29,10:$V0,11:$V1,13:$V6,15:$V7,19:[1,22],21:26,24:$V8,31:21,32:23,34:27,37:$V9,44:28,61:$Va,62:$Vb,63:$Vc,64:$Vd},o($V3,[2,13]),{9:41,10:$V0,11:$V1,13:$Ve,18:36,19:[1,37],20:38,21:40,37:$V9,61:$Va,62:$Vb,63:$Vc,64:$Vd},{9:29,10:$V0,11:$V1,13:$V6,15:$V7,19:[1,42],21:26,24:$V8,32:43,34:27,37:$V9,44:28,61:$Va,62:$Vb,63:$Vc,64:$Vd},o($V3,[2,28]),o($Vf,[2,30]),{21:45,24:[1,44],35:[1,46],37:$V9,61:$Va,62:$Vb,63:$Vc,64:$Vd},{15:[1,47]},{15:[1,48],42:49},o($Vf,[2,35]),{27:[1,50]},o($Vf,[2,39]),{22:$Vg,27:$Vh,45:[1,51]},{15:[2,62]},{15:[2,63]},{15:[2,64]},{15:[2,65]},{15:[2,66]},{9:41,10:$V0,11:$V1,13:$Ve,19:[1,53],20:54,21:40,37:$V9,61:$Va,62:$Vb,63:$Vc,64:$Vd},o($V3,[2,15]),o($Vi,[2,17]),{21:55,24:[1,56],37:$V9,61:$Va,62:$Vb,63:$Vc,64:$Vd},{15:[1,57]},o($Vi,[2,21]),o($V3,[2,27]),o($Vf,[2,29]),{15:[1,58]},{15:[1,59],42:60},{24:[1,61]},{22:[1,62]},o($Vj,$Vk,{22:[1,63]}),{27:$Vl,43:64,45:$Vm,68:$Vn,69:$Vo,103:$Vp},o($Vf,[2,38]),{15:$Vq,22:$Vr,44:77,46:70,67:81,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz},{15:$Vq,22:$Vr,26:[1,84],44:77,46:85,67:81,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:83},o($V3,[2,14]),o($Vi,[2,16]),{15:[1,86]},{15:[1,87]},{22:[1,88]},{22:[1,89]},o($Vj,$Vk,{22:[1,90]}),{27:$Vl,43:91,45:$Vm,68:$Vn,69:$Vo,103:$Vp},{36:[1,92]},{15:$Vq,21:96,22:$Vr,25:94,26:$VA,33:93,37:$V9,44:77,46:97,61:$Va,62:$Vb,63:$Vc,64:$Vd,67:81,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz},{15:$Vq,21:96,22:$Vr,25:94,26:$VA,33:98,37:$V9,44:77,46:97,61:$Va,62:$Vb,63:$Vc,64:$Vd,67:81,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz},o($Vf,[2,37]),{15:[1,99]},{15:$Vq,22:$Vr,44:77,46:100,67:81,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz},o($VB,[2,123]),{27:[1,101]},{27:[1,102]},{27:[1,103],81:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,95:$VP},{15:$Vq,22:$Vr,44:77,46:118,67:81,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz},{15:$Vq,22:$Vr,44:77,46:119,67:81,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz},o($VQ,[2,102]),o($VQ,[2,103]),o($VQ,[2,104]),o($VQ,[2,105]),o($VQ,[2,106]),o($VQ,[2,107]),o($VQ,[2,108]),{15:$Vq,22:$Vr,44:77,46:120,67:81,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz},o($VQ,[2,110]),o($VQ,$Vh,{22:$Vg,68:$VR,69:$VS}),{26:[1,123],103:$VT},o($VQ,$VU),o($VV,[2,118],{81:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,95:$VP}),{22:[1,125]},{22:[1,126]},{15:$Vq,21:96,22:$Vr,23:127,25:128,26:$VW,37:$V9,44:77,46:97,61:$Va,62:$Vb,63:$Vc,64:$Vd,67:81,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz},{15:$Vq,21:96,22:$Vr,25:94,26:$VA,33:130,37:$V9,44:77,46:97,61:$Va,62:$Vb,63:$Vc,64:$Vd,67:81,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz},{15:$Vq,21:96,22:$Vr,25:94,26:$VA,33:131,37:$V9,44:77,46:97,61:$Va,62:$Vb,63:$Vc,64:$Vd,67:81,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz},o($Vf,[2,41]),{22:[1,132]},o($Vf,[2,32]),{26:[1,133],103:$VX},{17:$VY,27:[1,136],41:135},{15:[1,138]},o($VV,[2,128],{81:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,95:$VP}),o($Vf,[2,34]),o($Vj,[2,120]),{27:[1,139],81:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,95:$VP},o($VB,[2,124]),o($VB,[2,125]),o($Vf,[2,40]),{15:$Vq,22:$Vr,44:77,46:140,67:81,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz},{15:$Vq,22:$Vr,44:77,46:141,67:81,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz},{15:$Vq,22:$Vr,44:77,46:142,67:81,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz},{15:$Vq,22:$Vr,44:77,46:143,67:81,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz},{15:$Vq,22:$Vr,44:77,46:144,67:81,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz},{15:$Vq,22:$Vr,44:77,46:145,67:81,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz},{15:$Vq,22:$Vr,44:77,46:146,67:81,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz},{15:$Vq,22:$Vr,44:77,46:147,67:81,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz},{15:$Vq,22:$Vr,44:77,46:148,67:81,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz},{15:$Vq,22:$Vr,44:77,46:149,67:81,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz},{15:$Vq,22:$Vr,44:77,46:150,67:81,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz},{15:$Vq,22:$Vr,44:77,46:151,67:81,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz},{15:$Vq,22:$Vr,44:77,46:152,67:81,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz},{15:$Vq,22:$Vr,44:77,46:153,67:81,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz},o($VQ,[2,86]),o($VQ,[2,87]),{26:[1,154],81:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,95:$VP},o($VQ,[2,71]),o($VQ,[2,72]),o($VQ,$VZ),{15:$Vq,22:$Vr,44:77,46:155,67:81,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz},{15:$Vq,21:96,22:$Vr,23:156,25:128,26:$VW,37:$V9,44:77,46:97,61:$Va,62:$Vb,63:$Vc,64:$Vd,67:81,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz},{15:$Vq,21:96,22:$Vr,23:157,25:128,26:$VW,37:$V9,44:77,46:97,61:$Va,62:$Vb,63:$Vc,64:$Vd,67:81,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz},o($Vi,[2,19]),{26:[1,158],103:$VX},{27:[1,159]},o($Vf,[2,31]),o($Vf,[2,33]),{37:[1,160]},{17:$VY,27:[1,162],41:161},{21:163,37:$V9,61:$Va,62:$Vb,63:$Vc,64:$Vd},o($Vf,[2,44]),o($Vf,[2,45]),{9:168,10:$V0,11:$V1,15:$V_,19:[1,165],21:187,37:$V9,44:173,47:164,48:166,49:167,50:169,51:170,52:171,53:172,54:174,55:175,56:176,57:177,58:178,59:179,60:180,61:$Va,62:$Vb,63:$Vc,64:$Vd,65:$V$,70:$V01,71:$V11,73:$V21,79:$V31,104:$V41,105:$V51,106:$V61},o($VV,[2,127]),o($VB,[2,122]),o($V71,[2,88],{84:$VE,85:$VF,86:$VG,87:$VH}),o($V71,[2,89],{84:$VE,85:$VF,86:$VG,87:$VH}),o($V81,[2,90],{86:$VG,87:$VH}),o($V81,[2,91],{86:$VG,87:$VH}),o($VQ,[2,92]),o($VQ,[2,93]),o($V91,[2,94],{81:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH}),o($V91,[2,95],{81:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH}),o($V91,[2,96],{81:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH}),o($V91,[2,97],{81:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH}),o($Va1,[2,98],{81:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL}),o($Va1,[2,99],{81:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL}),o([26,27,94,103],[2,100],{81:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,95:$VP}),o([26,27,94,95,103],[2,101],{81:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN}),o($VQ,[2,109]),o($VV,[2,117],{81:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,95:$VP}),o($Vi,[2,18]),o($Vi,[2,20]),{27:[1,191]},o($Vi,[2,23]),{38:[1,192]},o($Vf,[2,42]),o($Vf,[2,43]),{15:[1,193]},{9:168,10:$V0,11:$V1,15:$V_,19:[1,194],21:187,37:$V9,44:173,48:195,49:167,50:169,51:170,52:171,53:172,54:174,55:175,56:176,57:177,58:178,59:179,60:180,61:$Va,62:$Vb,63:$Vc,64:$Vd,65:$V$,70:$V01,71:$V11,73:$V21,79:$V31,104:$V41,105:$V51,106:$V61},o($Vb1,[2,85]),o($Vc1,[2,47]),o($Vc1,[2,48]),o($Vc1,[2,49]),o($Vc1,[2,50]),o($Vc1,[2,51]),o($Vc1,[2,52]),o($Vc1,[2,53]),o($Vc1,[2,54]),o($Vc1,[2,55]),o($Vc1,[2,56]),o($Vc1,[2,57]),o($Vc1,[2,58]),o($Vc1,[2,59]),o($Vc1,[2,60]),o($Vc1,[2,61]),{74:[1,196]},{22:$Vd1,72:197},{22:$Vd1,72:199},{17:$VY,41:200},{22:[1,201]},o($Vc1,$Vh,{22:[1,202],45:[1,203],68:[1,204],69:[1,205]}),{15:[1,207],42:206},{27:[1,208]},{15:$Vq,22:$Vr,27:[1,210],44:77,46:209,67:81,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz},{27:[1,211]},o($Vi,[2,22]),{39:[1,212]},o($VV,[2,126]),o($Vb1,[2,84]),o($Vc1,[2,46]),{75:[1,213]},{17:$VY,41:214},{15:$Vq,22:$Vr,44:77,46:215,67:81,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz},{17:$VY,41:216},{71:[1,217]},{15:[1,220],21:219,37:$V9,61:$Va,62:$Vb,63:$Vc,64:$Vd,66:218},{15:$Vq,22:$Vr,26:[1,222],44:77,46:85,67:81,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:221},{15:$Vq,22:$Vr,44:77,46:223,67:81,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz},{27:[1,224]},{27:[1,225]},{27:$Vl,43:226,45:$Vm,68:$Vn,69:$Vo,103:$Vp},o($Vj,$Vk),o($Vc1,[2,129]),{27:[1,227],81:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,95:$VP},o($Vc1,[2,130]),o($Vc1,[2,132]),{40:[1,228]},{74:[1,229]},o($Vc1,[2,79]),{26:[1,230],81:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,95:$VP},o($Vc1,[2,80],{80:[1,231]}),{22:$Vd1,72:232},{27:[1,233]},{15:[1,234]},{45:[1,235]},{26:[1,236],103:$VT},o($Vc1,$VU,{27:[1,237]}),{27:[1,238],81:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,95:$VP},o($Vc1,[2,73]),o($Vc1,[2,74]),o($Vc1,[2,119]),o($Vc1,[2,131]),{26:[1,239]},{76:240,77:[1,241],78:[1,242]},o([17,27],[2,83]),{17:$VY,41:243,51:244,79:$V31},{27:[1,245]},{15:$Vq,22:$Vr,44:77,46:246,67:81,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz},{27:[2,70],45:[1,247]},{15:$Vq,22:$Vr,44:77,46:248,67:81,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz},o($Vc1,$VZ,{27:[1,249]}),o($Vc1,[2,113]),o($Vc1,[2,111]),{17:$VY,41:250},{22:[1,251]},{22:[2,77]},{22:[2,78]},o($Vc1,[2,81]),o($Vc1,[2,82]),o($Vc1,[2,75]),{27:[1,252],81:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,95:$VP},{15:$Vq,22:$Vr,44:77,46:253,67:81,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz},{27:[2,69],81:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,95:$VP},o($Vc1,[2,112]),o($Vf,[2,36]),{15:$Vq,22:$Vr,44:77,46:254,67:81,81:$Vs,82:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz},{15:[1,256],67:255},{27:[2,68],81:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,95:$VP},{26:[1,257],81:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK,91:$VL,92:$VM,93:$VN,94:$VO,95:$VP},{26:[1,258]},{68:$VR,69:$VS},{27:[1,259]},{17:$VY,41:260},o($Vc1,[2,76]),o($Vc1,[2,67])],
defaultActions: {31:[2,62],32:[2,63],33:[2,64],34:[2,65],35:[2,66],241:[2,77],242:[2,78]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  const {Arbol} = require('../Simbols/Arbol');
   const {Class} =require ('../ClasesParaArbol/Class')
   const {Interface} =require ('../ClasesParaArbol/Interface')
   const {FunctionInterface}= require('../ClasesParaArbol/FuncionInterface')
   const {Metodo_FuncionIN} =require('../ClasesParaArbol/MetodoOFuncion_Interface')
   const {Metodo_C} =require('../ClasesParaArbol/Metodo_C')
   const {Funcion_C} =require('../ClasesParaArbol/Funcion_C')
   const {DeclaracionAfuera} =require('../ClasesParaArbol/DeclaracionAfuera')
   const {Main} =require('../ClasesParaArbol/Main')
   const {Metodo_Fc} =require('../ClasesParaArbol/Metodo_Fc')
   const {For_alv}=require('../ClasesParaArbol/For')
   const {Declaracion_For}=require('../ClasesParaArbol/Declaracion_For')
   
   const {Asignacion}=require('../ClasesParaArbol/Asignacion')
   const {Do_While}=require('../ClasesParaArbol/Do_While')
    const {Comentarios}=require('../ClasesParaArbol/Comentarios')
 
   const {Increment_Decrements}=require('../ClasesParaArbol/Increment_Decrement')
   const {Sout}=require('../ClasesParaArbol/Sout')
   const {Whiles}=require('../ClasesParaArbol/While')
   const {Ifs}=require('../ClasesParaArbol/IF')
   const {Operaciones}=require('../ClasesParaArbol/Operaciones')
    const {Id_Solo}=require('../ClasesParaArbol/Id_Solo')
    const {ReturnM}=require('../ClasesParaArbol/ReturnM')
  const {ReturnF}=require('../ClasesParaArbol/ReturnF')
  
   const {Condicionales}=require('../ClasesParaArbol/Condicionales') 
   const {Dato_Exp}=require('../ClasesParaArbol/Dato_Exp') 

   const {Switchs}=require('../ClasesParaArbol/Switch') 
   const {Case}=require('../ClasesParaArbol/Case') 
   const {Default}=require('../ClasesParaArbol/Default') 
    const {Break}=require('../ClasesParaArbol/Break') 
   const {Exp_Case}=require('../ClasesParaArbol/Exp_Case') 
    const {LlamadaMetodo}=require('../ClasesParaArbol/LlamadaMetodo') 
    const {DeclaracionMF}=require('../ClasesParaArbol/DeclaracionMF') 
      const {Parametro}=require('../ClasesParaArbol/Parametro') 
      const {Continues}=require('../ClasesParaArbol/Continue') 
      const {TipoV}=require('../ClasesParaArbol/TipoV') 
         let CErrores=require('../ManejoErrores/Errores');
    let CNodoError=require('../ManejoErrores/NodoError');
    
         const{Errores} =require('../ManejoErrores/Errores');

         const{Token} =require('../ManejoErrores/Token');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// cualquier cosa xd
break;
case 1:$$= new Token(yy_.yytext,"comentario de Linea ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 10 
break;
case 2:$$= new Token(yy_.yytext,"comentarioMulti ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 11 
break;
case 3:$$= new Token(yy_.yytext,"char ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 100 
break;
case 4:$$= new Token(yy_.yytext,"cadena ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 99 
break;
case 5:$$= new Token(yy_.yytext,"decimal ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 96 
break;
case 6:$$= new Token(yy_.yytext,"entero ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 101 
break;
case 7:$$= new Token(":","dos puntos ", yy_.yylloc.first_column,yy_.yylloc.first_line); return ':' 
break;
case 8:$$= new Token("/","barra ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 85 
break;
case 9:$$= new Token(";","punto y coma ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 27 
break;
case 10:$$= new Token("--","decremento ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 69 
break;
case 11:$$= new Token("-","menos", yy_.yylloc.first_column,yy_.yylloc.first_line); return 81 
break;
case 12:$$= new Token("++","plus plus ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 68 
break;
case 13:$$= new Token("+","mas  ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 83 
break;
case 14:$$= new Token("*","asterisco ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 84 
break;
case 15:$$= new Token("^","elevado ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 87 
break;
case 16:$$= new Token("%","porcentaje ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 86 
break;
case 17:$$= new Token(".","punto", yy_.yylloc.first_column,yy_.yylloc.first_line); return 74 
break;
case 18:$$= new Token("<=","menor igual ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 91 
break;
case 19:$$= new Token(">=","mayor igual ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 90 
break;
case 20:$$= new Token("<","menor ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 88 
break;
case 21:$$= new Token(">","mayor ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 89 
break;
case 22:$$= new Token("==","doble igual ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 92 
break;
case 23:$$= new Token("!=","diferente ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 93 
break;
case 24:$$= new Token("||","O ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 94 
break;
case 25:$$= new Token("&&","Y ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 95 
break;
case 26:$$= new Token("!","admiracion ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 82 
break;
case 27:$$= new Token("="," igual ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 45 
break;
case 28:$$= new Token(",","coma", yy_.yylloc.first_column,yy_.yylloc.first_line); return 103 
break;
case 29:$$= new Token("(" , "parentesis abierto", yy_.yylloc.first_column,yy_.yylloc.first_line); return 22 
break;
case 30:$$= new Token(")","parentesis cerrado", yy_.yylloc.first_column,yy_.yylloc.first_line); return 26 
break;
case 31:$$= new Token("[" , "CORCHETE abierto", yy_.yylloc.first_column,yy_.yylloc.first_line); return 38 
break;
case 32:$$= new Token("]","Corchete cerrado", yy_.yylloc.first_column,yy_.yylloc.first_line); return 39 
break;
case 33:$$= new Token("{","Llave abierta", yy_.yylloc.first_column,yy_.yylloc.first_line); return 17 
break;
case 34:$$= new Token("}",  "llave cerrada", yy_.yylloc.first_column,yy_.yylloc.first_line); return 19 
break;
case 35:$$= new Token("public","palabra reservada public", yy_.yylloc.first_column,yy_.yylloc.first_line); return 13 
break;
case 36:$$= new Token("static","palabra reservada static", yy_.yylloc.first_column,yy_.yylloc.first_line); return 35 
break;
case 37:$$= new Token("main","palabra reservada main", yy_.yylloc.first_column,yy_.yylloc.first_line); return 36 
break;
case 38:$$= new Token("println","palabra reservada println", yy_.yylloc.first_column,yy_.yylloc.first_line); return 77 
break;
case 39:$$= new Token("print","palabra reservada print", yy_.yylloc.first_column,yy_.yylloc.first_line); return 78 
break;
case 40:$$= new Token("out","palabra reservada out", yy_.yylloc.first_column,yy_.yylloc.first_line); return 75 
break;
case 41:$$= new Token("System","palabra reservada System", yy_.yylloc.first_column,yy_.yylloc.first_line); return 73 
break;
case 42:$$= new Token("void","palabra reservada void", yy_.yylloc.first_column,yy_.yylloc.first_line); return 24 
break;
case 43:$$= new Token("args","palabra reservada args", yy_.yylloc.first_column,yy_.yylloc.first_line); return 40 
break;
case 44:$$= new Token("return","palabra reservada return", yy_.yylloc.first_column,yy_.yylloc.first_line); return 105 
break;
case 45:$$= new Token("if","palabra reservada if", yy_.yylloc.first_column,yy_.yylloc.first_line); return 79 
break;
case 46:$$= new Token("else","palabra reservada else", yy_.yylloc.first_column,yy_.yylloc.first_line); return 80 
break;
case 47:return 'switch'
break;
case 48:return 'case'
break;
case 49:return 'default' 
break;
case 50:$$= new Token("break","palabra reservada break", yy_.yylloc.first_column,yy_.yylloc.first_line); return 106 
break;
case 51:$$= new Token("continue","palabra reservada continue", yy_.yylloc.first_column,yy_.yylloc.first_line); return 104 
break;
case 52:$$= new Token("while","palabra reservada while", yy_.yylloc.first_column,yy_.yylloc.first_line); return 71 
break;
case 53:$$= new Token("do","palabra reservada do", yy_.yylloc.first_column,yy_.yylloc.first_line); return 70 
break;
case 54:$$= new Token("for","palabra reservada for", yy_.yylloc.first_column,yy_.yylloc.first_line); return 65 
break;
case 55:$$= new Token("false","palabra reservada false", yy_.yylloc.first_column,yy_.yylloc.first_line); return 98 
break;
case 56:$$= new Token("true","palabra reservada true", yy_.yylloc.first_column,yy_.yylloc.first_line); return 97 
break;
case 57:$$= new Token("Class","Palabra Reservada clase: ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 29 
break;
case 58:$$= new Token("interface","palabra reservada interface", yy_.yylloc.first_column,yy_.yylloc.first_line); return 14 
break;
case 59:$$= new Token("char","palabra reservada char", yy_.yylloc.first_column,yy_.yylloc.first_line); return 64 
break;
case 60:$$= new Token("double","palabra reservada double", yy_.yylloc.first_column,yy_.yylloc.first_line); return 63 
break;
case 61:$$= new Token("int","palabra reservada int", yy_.yylloc.first_column,yy_.yylloc.first_line); return 61 
break;
case 62:$$= new Token("String","palabra reservada String", yy_.yylloc.first_column,yy_.yylloc.first_line); return 37 
break;
case 63:$$= new Token("boolean","palabra reservada boolean", yy_.yylloc.first_column,yy_.yylloc.first_line); return 62 
break;
case 64:$$= new Token(yy_.yytext,"id", yy_.yylloc.first_column,yy_.yylloc.first_line); return 15 
break;
case 65:return 5
break;
case 66: $$ = new Error("LEXICO","No se esperaba el caracter: "+yy_.yytext,yy_.yylloc.first_column,yy_.yylloc.first_line);  console.error('Este es un error léxico: ' + yy_.yytext + '  en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:(('[^☼]')))/,/^(?:(("[^"]*")))/,/^(?:(([0-9]+)(\.([0-9]+))?))/,/^(?:([0-9]+))/,/^(?::)/,/^(?:\/)/,/^(?:;)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:\*)/,/^(?:\^)/,/^(?:%)/,/^(?:\.)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:=)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:public\b)/,/^(?:static\b)/,/^(?:main\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:out\b)/,/^(?:System\b)/,/^(?:void\b)/,/^(?:args\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:false\b)/,/^(?:true\b)/,/^(?:class\b)/,/^(?:interface\b)/,/^(?:char\b)/,/^(?:double\b)/,/^(?:int\b)/,/^(?:String\b)/,/^(?:boolean\b)/,/^(?:(([a-zA-Z_])[a-zA-Z0-9_]*))/,/^(?:$)/,/^(?:)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GramaticaPrueba;
exports.Parser = GramaticaPrueba.Parser;
exports.parse = function () { return GramaticaPrueba.parse.apply(GramaticaPrueba, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}