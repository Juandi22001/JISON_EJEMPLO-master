/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GramaticaPrueba = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[5,10],$V2=[2,7],$V3=[1,21],$V4=[1,24],$V5=[1,22],$V6=[1,26],$V7=[1,25],$V8=[1,27],$V9=[1,28],$Va=[1,29],$Vb=[1,33],$Vc=[10,12,16,29,35,55,56,57,58],$Vd=[10,16,35,55,56,57,58],$Ve=[23,40,98],$Vf=[2,104],$Vg=[1,57],$Vh=[1,56],$Vi=[1,55],$Vj=[1,69],$Vk=[1,68],$Vl=[1,59],$Vm=[1,60],$Vn=[1,61],$Vo=[1,62],$Vp=[1,63],$Vq=[1,64],$Vr=[1,66],$Vs=[1,67],$Vt=[1,78],$Vu=[10,12,16,29,35,54,55,56,57,58,59,64,65,67,73,99,100],$Vv=[1,85],$Vw=[1,84],$Vx=[1,86],$Vy=[1,87],$Vz=[1,88],$VA=[1,89],$VB=[1,90],$VC=[1,91],$VD=[1,92],$VE=[1,93],$VF=[1,94],$VG=[1,95],$VH=[1,96],$VI=[1,97],$VJ=[22,23,75,77,78,79,80,81,82,83,84,85,86,87,88,89,98],$VK=[1,105],$VL=[1,110],$VM=[1,112],$VN=[1,158],$VO=[1,152],$VP=[1,157],$VQ=[1,156],$VR=[1,154],$VS=[1,153],$VT=[1,155],$VU=[1,160],$VV=[1,161],$VW=[22,98],$VX=[22,23,75,77,82,83,84,85,86,87,88,89,98],$VY=[22,23,75,77,78,79,82,83,84,85,86,87,88,89,98],$VZ=[22,23,82,83,84,85,86,87,88,89,98],$V_=[22,23,86,87,88,89,98],$V$=[1,163],$V01=[10,12,16,29,35,54,55,56,57,58,59,64,65,67,73,74,99,100],$V11=[12,16,35,54,55,56,57,58,59,64,65,67,73,99,100],$V21=[1,171];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"ComienzoA":4,"EOF":5,"InstruccionesA":6,"SentenciaClase":7,"SentenciaInterface":8,"ListaInterfaces":9,"public":10,"interface":11,"id":12,"InicioInterface":13,"{":14,"InterfaceMenu":15,"}":16,"DeclaracionInterface":17,"TIPO":18,"(":19,"Metodos_FuncionesI":20,"Parametros_Tipo":21,")":22,";":23,"ListaClases":24,"class":25,"InicioClase":26,"MenuClase":27,"DeclaracionClase":28,"void":29,"Metodos_Funciones":30,"L_ids":31,"AsignacionV_P":32,"static":33,"main":34,"String":35,"[":36,"]":37,"args":38,"BlockInstrucciones":39,"=":40,"EXPRESION":41,"Instrucciones":42,"INSTRUCCION":43,"SOUT":44,"WHILE":45,"IF":46,"DOWHILE":47,"FOR":48,"AsignacionV_P_SIMPLE":49,"DeclaracionM_Funciones":50,"CONTINUE":51,"Return_F":52,"Return_M":53,"BREAK":54,"int":55,"boolean":56,"double":57,"char":58,"for":59,"Declaracion_f":60,"Increment_Decrement":61,"incremento":62,"decremento":63,"do":64,"while":65,"Condicionales":66,"System":67,".":68,"out":69,"TipoPrint":70,"println":71,"print":72,"if":73,"else":74,"-":75,"!":76,"+":77,"*":78,"/":79,"%":80,"^":81,"<":82,">":83,">=":84,"<=":85,"==":86,"!=":87,"||":88,"&&":89,"decimal":90,"true":91,"false":92,"STRING_LITERAL":93,"EXPRESION_METODO":94,"caracter":95,"entero":96,"Llamar_Metodo_Exp":97,",":98,"continue":99,"return":100,"Break_Ciclo":101,"break":102,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"public",11:"interface",12:"id",14:"{",16:"}",19:"(",22:")",23:";",25:"class",29:"void",33:"static",34:"main",35:"String",36:"[",37:"]",38:"args",40:"=",54:"BREAK",55:"int",56:"boolean",57:"double",58:"char",59:"for",62:"incremento",63:"decremento",64:"do",65:"while",67:"System",68:".",69:"out",71:"println",72:"print",73:"if",74:"else",75:"-",76:"!",77:"+",78:"*",79:"/",80:"%",81:"^",82:"<",83:">",84:">=",85:"<=",86:"==",87:"!=",88:"||",89:"&&",90:"decimal",91:"true",92:"false",93:"STRING_LITERAL",95:"caracter",96:"entero",98:",",99:"continue",100:"return",102:"break"},
productions_: [0,[3,2],[3,0],[4,2],[4,1],[6,1],[6,1],[6,1],[9,2],[9,1],[8,4],[13,3],[13,2],[15,2],[15,1],[17,5],[17,4],[20,3],[20,2],[24,2],[24,1],[7,4],[26,3],[26,2],[27,2],[27,1],[28,5],[28,4],[28,5],[28,4],[28,4],[28,11],[28,3],[28,4],[30,3],[30,2],[42,2],[42,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[18,1],[18,1],[18,1],[18,1],[18,1],[48,9],[60,4],[60,3],[61,2],[61,2],[47,5],[44,9],[70,1],[70,1],[45,3],[46,3],[46,5],[46,5],[66,3],[39,3],[39,2],[41,2],[41,2],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,3],[49,4],[49,5],[49,4],[94,4],[94,3],[94,1],[97,3],[97,1],[50,3],[31,3],[31,1],[32,3],[32,1],[21,4],[21,2],[51,2],[53,2],[52,3],[101,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return this.$
break;
case 3:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1]
break;
case 4:
this.$ = [$$[$0]]
break;
case 5:
this.$ = new Arbol($$[$0]); this.$= $$[$0] ;
break;
case 6:
this.$ = new Arbol($$[$0]); this.$= $$[$0];
break;
case 7:
this.$ = new Arbol($$[$0]); 
break;
case 8: case 13: case 19: case 24: case 36:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 9: case 14: case 20: case 25: case 37: case 101: case 104:
 this.$ = [$$[$0]]; 
break;
case 10:
this.$ =new Interface(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0-1]);
break;
case 11: case 22: case 67: case 68:
this.$ = $$[$0-1];
break;
case 12: case 23: case 69:
this.$ = [];
break;
case 15:
this.$ =new FunctionInterface(this._$.first_line,this._$.first_column,$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1]);
break;
case 16:
this.$= new FunctionInterface(this._$.first_line,this._$.first_column,"-",$$[$0-2],$$[$0-1],$$[$0]);
break;
case 17:
this.$= new Metodo_FuncionIN(this._$.first_line,this._$.first_column,$$[$0-2]);
break;
case 18:
this.$= new Metodo_FuncionIN(this._$.first_line,this._$.first_column,[]);
break;
case 21:
this.$ =new Class(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0]); console.log("en una clase") 
break;
case 26:
this.$ =new Metodo_C(this._$.first_line,this._$.first_column,$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1]);
break;
case 27:
this.$ =new Metodo_C(this._$.first_line,this._$.first_column,".",$$[$0-2],$$[$0-2],$$[$0]);
break;
case 28:
this.$ =new Funcion_C(this._$.first_line,this._$.first_column,$$[$0-4],$$[$0-3],$$[$0-2],$$[$0]);
break;
case 29:
this.$= new Funcion_C(this._$.first_line,this._$.first_column,".",$$[$0-3],$$[$0-2],$$[$0]);
break;
case 30:
this.$ =new DeclaracionAfuera(this._$.first_line,this._$.first_column,$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
break;
case 31:
this.$= new Main(this._$.first_line,this._$.first_column,$$[$0-7],$$[$0-1]);
break;
case 32:
this.$ =new DeclaracionAfuera(this._$.first_line,this._$.first_column,".",$$[$0-2],$$[$0-1],$$[$0]);
break;
case 33: case 94:
this.$= new Asignacion(this._$.first_line,this._$.first_column,$$[$0-3],$$[$0-1]);
break;
case 34:
this.$= new Metodo_Fc(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0]);
break;
case 35:
this.$ =new Metodo_Fc(this._$.first_line,this._$.first_column,null,$$[$01]);
break;
case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 46: case 47: case 62:
this.$ = $$[$0];
break;
case 45:
this.$ = $$[$0]; console.log("continue");
break;
case 48:
this.$ = $$[$0];console.log("break");
break;
case 49: case 50: case 51: case 52: case 53:
this.$ = new TipoV($$[$0]);
break;
case 54:
this.$= new For_alv(this._$.first_line,this._$.first_column,$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]);
break;
case 55:
this.$ =new Declaracion_For(this._$.first_line,this._$.first_column,$$[$0-3],$$[$0-2],$$[$0]);
break;
case 56:
this.$ =new Asignacion(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0]);
break;
case 57: case 58:
this.$ =new Increment_Decrements(this._$.first_line,this._$.first_column,$$[$0-1],$$[$0]);
break;
case 59:
this.$ =new Do_While(this._$.first_line,this._$.first_column,$$[$0-4],$$[$0-3],$$[$0-1]);
break;
case 60:
this.$= new Sout(this._$.first_line,this._$.first_column,$$[$0-6],$$[$0-4]);

break;
case 61:
this.$ = $$[$0] ; 
break;
case 63:
this.$= new Whiles(this._$.first_line,this._$.first_column,$$[$0-1],$$[$0]);
break;
case 64:
this.$ =new Ifs(this._$.first_line,this._$.first_column,$$[$0-1],$$[$0],[]);
break;
case 65:
this.$= new Ifs(this._$.first_line,this._$.first_column,$$[$0-3],$$[$0-2],$$[$0-1]);
break;
case 66:
this.$=new Ifs(this._$.first_line,this._$.first_column,$$[$0-3],$$[$0-2],[$$[$0-1]]);
break;
case 70:
this.$= new Operaciones(this._$.first_line,this._$.first_column,null,$$[$0-1],$$[$0]);
break;
case 71:
this.$ =new Operaciones(this._$.first_line,this._$.first_column,null,$$[$0-1],$$[$0]);
break;
case 72: case 73: case 74: case 75:
this.$ =new Operaciones(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0-1],$$[$0]);
break;
case 76: case 77:
this.$= new Operaciones(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0-1],$$[$0]);
break;
case 78:
this.$ =new Condicionales(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0-1],$$[$0]);
break;
case 79:
this.$ = new Condicionales(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0-1],$$[$0]);
break;
case 80: case 84: case 85:
this.$= new Condicionales(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0-1],$$[$0]);
break;
case 81:
this.$ =new Condicionales(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0-1],$$[$0]);  
break;
case 82: case 83:
this.$ =new Condicionales(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 86:
 this.$ = new Dato_Exp(this._$.first_line, this._$.first_column,"Double", Number($$[$0])); 
break;
case 87:
 this.$ = new Dato_Exp( this._$.first_line, this._$.first_column,"Boolean", true); 
break;
case 88:
  this.$ = new Dato_Exp(this._$.first_line, this._$.first_column,"Boolean", false); 
break;
case 89:
  this.$ = new Dato_Exp(this._$.first_line, this._$.first_column,"String", $$[$0].replace(/\"/g,"")); 
break;
case 90:
 this.$ = $$[$0]
break;
case 91:
 this.$ = new Dato_Exp( this._$.first_line, this._$.first_column,"char", $$[$0].replace(/\'/g,"")); 
break;
case 92:
 this.$ = new Dato_Exp( this._$.first_line, this._$.first_column,"int",Number($$[$0]) );console.log("probando un") 
break;
case 93:
 this.$ = $$[$0-1]; 
break;
case 95:
this.$ =new LlamadaMetodo(this._$.first_line,this._$.first_column,$$[$0-4],$$[$0-2]);
break;
case 96:
this.$= new LlamadaMetodo(this._$.first_line,this._$.first_column,$$[$0-3],[]);
break;
case 97:
this.$= new LlamadaMetodo(this._$.first_line,this._$.first_column,$$[$0-3],$$[$0-1]);
break;
case 98:
this.$= new LlamadaMetodo(this._$.first_line,this._$.first_column,$$[$0-2],[]);
break;
case 99:
this.$ =new Id_Solo(this._$.first_line,this._$.first_column,$$[$0]);
break;
case 100:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 102:
this.$= new DeclaracionMF(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0-1],$$[$0]);
break;
case 103:
 $$[$0-2].push( $$[$0]); this.$ = $$[$0-2]; 
break;
case 105:
this.$ = $$[$0-1] 
break;
case 106:
this.$ = null;
break;
case 107:
 $$[$0-3].push(new Parametro(this._$.first_line , this._$.first_column,$$[$0-1],$$[$0])); this.$ = $$[$0-3]; 
break;
case 108:
 this.$ = [new Parametro( this._$.first_line , this._$.first_column,$$[$0-1] , $$[$0])]; 
break;
case 109:
this.$ = new Continues( $$[$0-1], this._$.first_line, this._$.first_column);
break;
case 110:
this.$ = new ReturnM($$[$0-1], this._$.first_line , this._$.first_column);
break;
case 111:
this.$ = new ReturnF($$[$0-2], this._$.first_line , this._$.first_column);
break;
case 112:
this.$=new Break(this._$.first_line,this._$.first_column,$$[$0-1]);
break;
}
},
table: [{1:[2,2],3:1,4:2,5:[1,6],6:3,7:4,8:5,10:$V0},{1:[3]},{5:[1,8],6:9,7:4,8:5,10:$V0},o($V1,[2,4]),o($V1,[2,5]),o($V1,[2,6]),o($V1,$V2),{11:[1,11],25:[1,10]},o($V1,$V2,{1:[2,1]}),o($V1,[2,3]),{12:[1,12]},{12:[1,13]},{14:[1,15],26:14},{13:16,14:[1,17]},o($V1,[2,21]),{10:$V3,12:$V4,16:[1,19],18:23,27:18,28:20,29:$V5,35:$V6,55:$V7,56:$V8,57:$V9,58:$Va},o($V1,[2,10]),{10:$Vb,15:30,16:[1,31],17:32,18:34,35:$V6,55:$V7,56:$V8,57:$V9,58:$Va},{10:$V3,12:$V4,16:[1,35],18:23,28:36,29:$V5,35:$V6,55:$V7,56:$V8,57:$V9,58:$Va},o($V1,[2,23]),o($Vc,[2,25]),{18:38,29:[1,37],33:[1,39],35:$V6,55:$V7,56:$V8,57:$V9,58:$Va},{12:[1,40]},{12:[1,41],31:42},{40:[1,43]},{12:[2,49]},{12:[2,50]},{12:[2,51]},{12:[2,52]},{12:[2,53]},{10:$Vb,16:[1,44],17:45,18:34,35:$V6,55:$V7,56:$V8,57:$V9,58:$Va},o($V1,[2,12]),o($Vd,[2,14]),{18:46,35:$V6,55:$V7,56:$V8,57:$V9,58:$Va},{12:[1,47]},o($V1,[2,22]),o($Vc,[2,24]),{12:[1,48]},{12:[1,49],31:50},{29:[1,51]},{19:[1,52]},o($Ve,$Vf,{19:[1,53]}),{23:$Vg,32:54,40:$Vh,98:$Vi},{12:$Vj,19:$Vk,41:58,75:$Vl,76:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:65,95:$Vr,96:$Vs},o($V1,[2,11]),o($Vd,[2,13]),{12:[1,70]},{19:[1,71]},{19:[1,72]},o($Ve,$Vf,{19:[1,73]}),{23:$Vg,32:74,40:$Vh,98:$Vi},{34:[1,75]},{18:79,21:77,22:$Vt,30:76,35:$V6,55:$V7,56:$V8,57:$V9,58:$Va},{18:79,21:77,22:$Vt,30:80,35:$V6,55:$V7,56:$V8,57:$V9,58:$Va},o($Vc,[2,32]),{12:[1,81]},{12:$Vj,19:$Vk,41:82,75:$Vl,76:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:65,95:$Vr,96:$Vs},o($Vu,[2,106]),{23:[1,83],75:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI},{12:$Vj,19:$Vk,41:98,75:$Vl,76:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:65,95:$Vr,96:$Vs},{12:$Vj,19:$Vk,41:99,75:$Vl,76:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:65,95:$Vr,96:$Vs},o($VJ,[2,86]),o($VJ,[2,87]),o($VJ,[2,88]),o($VJ,[2,89]),o($VJ,[2,90]),o($VJ,[2,91]),o($VJ,[2,92]),{12:$Vj,19:$Vk,41:100,75:$Vl,76:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:65,95:$Vr,96:$Vs},o($VJ,[2,99],{19:[1,101]}),{19:[1,102]},{18:79,20:103,21:104,22:$VK,35:$V6,55:$V7,56:$V8,57:$V9,58:$Va},{18:79,21:77,22:$Vt,30:106,35:$V6,55:$V7,56:$V8,57:$V9,58:$Va},{18:79,21:77,22:$Vt,30:107,35:$V6,55:$V7,56:$V8,57:$V9,58:$Va},o($Vc,[2,30]),{19:[1,108]},o($Vc,[2,27]),{22:[1,109],98:$VL},{14:$VM,39:111},{12:[1,113]},o($Vc,[2,29]),o($Ve,[2,103]),{23:[1,114],75:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI},o($Vc,[2,33]),{12:$Vj,19:$Vk,41:115,75:$Vl,76:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:65,95:$Vr,96:$Vs},{12:$Vj,19:$Vk,41:116,75:$Vl,76:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:65,95:$Vr,96:$Vs},{12:$Vj,19:$Vk,41:117,75:$Vl,76:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:65,95:$Vr,96:$Vs},{12:$Vj,19:$Vk,41:118,75:$Vl,76:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:65,95:$Vr,96:$Vs},{12:$Vj,19:$Vk,41:119,75:$Vl,76:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:65,95:$Vr,96:$Vs},{12:$Vj,19:$Vk,41:120,75:$Vl,76:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:65,95:$Vr,96:$Vs},{12:$Vj,19:$Vk,41:121,75:$Vl,76:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:65,95:$Vr,96:$Vs},{12:$Vj,19:$Vk,41:122,75:$Vl,76:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:65,95:$Vr,96:$Vs},{12:$Vj,19:$Vk,41:123,75:$Vl,76:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:65,95:$Vr,96:$Vs},{12:$Vj,19:$Vk,41:124,75:$Vl,76:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:65,95:$Vr,96:$Vs},{12:$Vj,19:$Vk,41:125,75:$Vl,76:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:65,95:$Vr,96:$Vs},{12:$Vj,19:$Vk,41:126,75:$Vl,76:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:65,95:$Vr,96:$Vs},{12:$Vj,19:$Vk,41:127,75:$Vl,76:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:65,95:$Vr,96:$Vs},{12:$Vj,19:$Vk,41:128,75:$Vl,76:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:65,95:$Vr,96:$Vs},o($VJ,[2,70]),o($VJ,[2,71]),{22:[1,129],75:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI},{12:$Vj,19:$Vk,22:[1,131],41:132,75:$Vl,76:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:65,95:$Vr,96:$Vs,97:130},{18:79,20:133,21:104,22:$VK,35:$V6,55:$V7,56:$V8,57:$V9,58:$Va},o($Vd,[2,16]),{22:[1,134],98:$VL},{23:[1,135]},o($Vc,[2,26]),o($Vc,[2,28]),{35:[1,136]},{14:$VM,39:137},{18:138,35:$V6,55:$V7,56:$V8,57:$V9,58:$Va},o($Vc,[2,35]),{12:$VN,16:[1,140],18:159,35:$V6,42:139,43:141,44:142,45:143,46:144,47:145,48:146,49:147,50:148,51:149,52:150,53:151,54:$VO,55:$V7,56:$V8,57:$V9,58:$Va,59:$VP,64:$VQ,65:$VR,67:$VS,73:$VT,99:$VU,100:$VV},o($VW,[2,108]),o($Vu,[2,105]),o($VX,[2,72],{78:$Vx,79:$Vy,80:$Vz,81:$VA}),o($VX,[2,73],{78:$Vx,79:$Vy,80:$Vz,81:$VA}),o($VY,[2,74],{80:$Vz,81:$VA}),o($VY,[2,75],{80:$Vz,81:$VA}),o($VJ,[2,76]),o($VJ,[2,77]),o($VZ,[2,78],{75:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA}),o($VZ,[2,79],{75:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA}),o($VZ,[2,80],{75:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA}),o($VZ,[2,81],{75:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA}),o($V_,[2,82],{75:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE}),o($V_,[2,83],{75:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE}),o([22,23,88,98],[2,84],{75:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,89:$VI}),o([22,23,88,89,98],[2,85],{75:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG}),o($VJ,[2,93]),{22:[1,162],98:$V$},o($VJ,[2,98]),o($VW,[2,101],{75:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI}),o($Vd,[2,15]),{23:[1,164]},o($Vd,[2,18]),{36:[1,165]},o($Vc,[2,34]),{12:[1,166]},{12:$VN,16:[1,167],18:159,35:$V6,43:168,44:142,45:143,46:144,47:145,48:146,49:147,50:148,51:149,52:150,53:151,54:$VO,55:$V7,56:$V8,57:$V9,58:$Va,59:$VP,64:$VQ,65:$VR,67:$VS,73:$VT,99:$VU,100:$VV},o($V01,[2,69]),o($V11,[2,37]),o($V11,[2,38]),o($V11,[2,39]),o($V11,[2,40]),o($V11,[2,41]),o($V11,[2,42]),o($V11,[2,43]),o($V11,[2,44]),o($V11,[2,45]),o($V11,[2,46]),o($V11,[2,47]),o($V11,[2,48]),{68:[1,169]},{19:$V21,66:170},{19:$V21,66:172},{14:$VM,39:173},{19:[1,174]},{19:[1,176],40:[1,175]},{12:[1,178],31:177},{23:[1,179]},{12:$Vj,19:$Vk,23:[1,181],41:180,75:$Vl,76:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:65,95:$Vr,96:$Vs},o($VJ,[2,97]),{12:$Vj,19:$Vk,41:182,75:$Vl,76:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:65,95:$Vr,96:$Vs},o($Vd,[2,17]),{37:[1,183]},o($VW,[2,107]),o($V01,[2,68]),o($V11,[2,36]),{69:[1,184]},{14:$VM,39:185},{12:$Vj,19:$Vk,41:186,75:$Vl,76:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:65,95:$Vr,96:$Vs},{14:$VM,39:187},{65:[1,188]},{12:[1,191],18:190,35:$V6,55:$V7,56:$V8,57:$V9,58:$Va,60:189},{12:$Vj,19:$Vk,41:192,75:$Vl,76:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:65,95:$Vr,96:$Vs},{12:$Vj,19:$Vk,22:[1,194],41:132,75:$Vl,76:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:65,95:$Vr,96:$Vs,97:193},{23:$Vg,32:195,40:$Vh,98:$Vi},o($Ve,$Vf),o($V11,[2,109]),{23:[1,196],75:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI},o($V11,[2,110]),o($VW,[2,100],{75:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI}),{38:[1,197]},{68:[1,198]},o($V11,[2,63]),{22:[1,199],75:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI},o($V11,[2,64],{74:[1,200]}),{19:$V21,66:201},{23:[1,202]},{12:[1,203]},{40:[1,204]},{23:[1,205],75:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI},{22:[1,206],98:$V$},{23:[1,207]},o($V11,[2,102]),o($V11,[2,111]),{22:[1,208]},{70:209,71:[1,210],72:[1,211]},o([14,23],[2,67]),{14:$VM,39:212,46:213,73:$VT},{23:[1,214]},{12:$Vj,19:$Vk,41:215,75:$Vl,76:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:65,95:$Vr,96:$Vs},{40:[1,216]},{12:$Vj,19:$Vk,41:217,75:$Vl,76:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:65,95:$Vr,96:$Vs},o($V11,[2,94]),{23:[1,218]},o($V11,[2,96]),{14:$VM,39:219},{19:[1,220]},{19:[2,61]},{19:[2,62]},o($V11,[2,65]),o($V11,[2,66]),o($V11,[2,59]),{23:[1,221],75:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI},{12:$Vj,19:$Vk,41:222,75:$Vl,76:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:65,95:$Vr,96:$Vs},{23:[2,56],75:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI},o($V11,[2,95]),o($Vc,[2,31]),{12:$Vj,19:$Vk,41:223,75:$Vl,76:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:65,95:$Vr,96:$Vs},{12:[1,225],61:224},{23:[2,55],75:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI},{22:[1,226],75:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI},{22:[1,227]},{62:[1,228],63:[1,229]},{23:[1,230]},{14:$VM,39:231},{22:[2,57]},{22:[2,58]},o($V11,[2,60]),o($V11,[2,54])],
defaultActions: {25:[2,49],26:[2,50],27:[2,51],28:[2,52],29:[2,53],210:[2,61],211:[2,62],228:[2,57],229:[2,58]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  const {Arbol} = require('../Simbols/Arbol');
   const {Class} =require ('../ClasesParaArbol/Class')
   const {Interface} =require ('../ClasesParaArbol/Interface')
   const {FunctionInterface}= require('../ClasesParaArbol/FuncionInterface')
   const {Metodo_FuncionIN} =require('../ClasesParaArbol/MetodoOFuncion_Interface')
   const {Metodo_C} =require('../ClasesParaArbol/Metodo_C')
   const {Funcion_C} =require('../ClasesParaArbol/Funcion_C')
   const {DeclaracionAfuera} =require('../ClasesParaArbol/DeclaracionAfuera')
   const {Main} =require('../ClasesParaArbol/Main')
   const {Metodo_Fc} =require('../ClasesParaArbol/Metodo_Fc')
   const {For_alv}=require('../ClasesParaArbol/For')
   const {Declaracion_For}=require('../ClasesParaArbol/Declaracion_For')
   
   const {Asignacion}=require('../ClasesParaArbol/Asignacion')
   const {Do_While}=require('../ClasesParaArbol/Do_While')
  
   const {Increment_Decrements}=require('../ClasesParaArbol/Increment_Decrement')
   const {Sout}=require('../ClasesParaArbol/Sout')
   const {Whiles}=require('../ClasesParaArbol/While')
   const {Ifs}=require('../ClasesParaArbol/IF')
   const {Operaciones}=require('../ClasesParaArbol/Operaciones')
    const {Id_Solo}=require('../ClasesParaArbol/Id_Solo')
    const {ReturnM}=require('../ClasesParaArbol/ReturnM')
  const {ReturnF}=require('../ClasesParaArbol/ReturnF')
  
   const {Condicionales}=require('../ClasesParaArbol/Condicionales') 
   const {Dato_Exp}=require('../ClasesParaArbol/Dato_Exp') 

   const {Switchs}=require('../ClasesParaArbol/Switch') 
   const {Case}=require('../ClasesParaArbol/Case') 
   const {Default}=require('../ClasesParaArbol/Default') 
    const {Break}=require('../ClasesParaArbol/Break') 
   const {Exp_Case}=require('../ClasesParaArbol/Exp_Case') 
    const {LlamadaMetodo}=require('../ClasesParaArbol/LlamadaMetodo') 
    const {DeclaracionMF}=require('../ClasesParaArbol/DeclaracionMF') 
      const {Parametro}=require('../ClasesParaArbol/Parametro') 
      const {Continues}=require('../ClasesParaArbol/Continue') 
      const {TipoV}=require('../ClasesParaArbol/TipoV') 
         let CErrores=require('../ManejoErrores/Errores');
    let CNodoError=require('../ManejoErrores/NodoError');
    
         const{Errores} =require('../ManejoErrores/Errores');

         const{Token} =require('../ManejoErrores/Token');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// cualquier cosa xd
break;
case 1://efe
break;
case 2://efe
break;
case 3:$$= new Token(yy_.yytext,"char ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 95 
break;
case 4:$$= new Token(yy_.yytext,"decimal ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 90 
break;
case 5:$$= new Token(yy_.yytext,"entero ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 96 
break;
case 6:$$= new Token(":","dos puntos ", yy_.yylloc.first_column,yy_.yylloc.first_line); return ':' 
break;
case 7:$$= new Token("/","barra ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 79 
break;
case 8:$$= new Token(";","punto y coma ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 23 
break;
case 9:$$= new Token("--","decremento ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 63 
break;
case 10:$$= new Token("-","menos", yy_.yylloc.first_column,yy_.yylloc.first_line); return 75 
break;
case 11:$$= new Token("++","plus plus ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 62 
break;
case 12:$$= new Token("+","mas  ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 77 
break;
case 13:$$= new Token("*","asterisco ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 78 
break;
case 14:$$= new Token("^","elevado ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 81 
break;
case 15:$$= new Token("%","porcentaje ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 80 
break;
case 16:$$= new Token(".","punto", yy_.yylloc.first_column,yy_.yylloc.first_line); return 68 
break;
case 17:$$= new Token("<=","menor igual ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 85 
break;
case 18:$$= new Token(">=","mayor igual ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 84 
break;
case 19:$$= new Token("<","menor ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 82 
break;
case 20:$$= new Token(">","mayor ", yy_.yylloc.first_column,yy_.yylloc.first_line); return ' >' 
break;
case 21:$$= new Token("==","doble igual ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 86 
break;
case 22:$$= new Token("!=","diferente ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 87 
break;
case 23:$$= new Token("||","O ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 88 
break;
case 24:$$= new Token("&&","Y ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 89 
break;
case 25:$$= new Token("!","admiracion ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 76 
break;
case 26:$$= new Token("="," igual ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 40 
break;
case 27:$$= new Token(",","coma", yy_.yylloc.first_column,yy_.yylloc.first_line); return 98 
break;
case 28:$$= new Token("(" , "parentesis abierto", yy_.yylloc.first_column,yy_.yylloc.first_line); return 19 
break;
case 29:$$= new Token(")","parentesis cerrado", yy_.yylloc.first_column,yy_.yylloc.first_line); return 22 
break;
case 30:$$= new Token("{","Llave abierta", yy_.yylloc.first_column,yy_.yylloc.first_line); return 14 
break;
case 31:$$= new Token("}",  "llave cerrada", yy_.yylloc.first_column,yy_.yylloc.first_line); return 16 
break;
case 32:$$= new Token("public","palabra reservada public", yy_.yylloc.first_column,yy_.yylloc.first_line); return 10 
break;
case 33:$$= new Token("static","palabra reservada static", yy_.yylloc.first_column,yy_.yylloc.first_line); return 33 
break;
case 34:$$= new Token("main","palabra reservada main", yy_.yylloc.first_column,yy_.yylloc.first_line); return 34 
break;
case 35:$$= new Token("println","palabra reservada println", yy_.yylloc.first_column,yy_.yylloc.first_line); return 71 
break;
case 36:$$= new Token("print","palabra reservada print", yy_.yylloc.first_column,yy_.yylloc.first_line); return 72 
break;
case 37:$$= new Token("out","palabra reservada out", yy_.yylloc.first_column,yy_.yylloc.first_line); return 69 
break;
case 38:$$= new Token("System","palabra reservada System", yy_.yylloc.first_column,yy_.yylloc.first_line); return 67 
break;
case 39:$$= new Token("void","palabra reservada void", yy_.yylloc.first_column,yy_.yylloc.first_line); return 29 
break;
case 40:$$= new Token("args","palabra reservada args", yy_.yylloc.first_column,yy_.yylloc.first_line); return 38 
break;
case 41:$$= new Token("return","palabra reservada return", yy_.yylloc.first_column,yy_.yylloc.first_line); return 100 
break;
case 42:$$= new Token("if","palabra reservada if", yy_.yylloc.first_column,yy_.yylloc.first_line); return 73 
break;
case 43:$$= new Token("else","palabra reservada else", yy_.yylloc.first_column,yy_.yylloc.first_line); return 74 
break;
case 44:return 'switch'
break;
case 45:return 'case'
break;
case 46:return 'default' 
break;
case 47:$$= new Token("break","palabra reservada break", yy_.yylloc.first_column,yy_.yylloc.first_line); return 102 
break;
case 48:$$= new Token("continue","palabra reservada continue", yy_.yylloc.first_column,yy_.yylloc.first_line); return 99 
break;
case 49:$$= new Token("while","palabra reservada while", yy_.yylloc.first_column,yy_.yylloc.first_line); return 65 
break;
case 50:$$= new Token("do","palabra reservada do", yy_.yylloc.first_column,yy_.yylloc.first_line); return 64 
break;
case 51:$$= new Token("for","palabra reservada for", yy_.yylloc.first_column,yy_.yylloc.first_line); return 59 
break;
case 52:$$= new Token("false","palabra reservada false", yy_.yylloc.first_column,yy_.yylloc.first_line); return 92 
break;
case 53:$$= new Token("true","palabra reservada true", yy_.yylloc.first_column,yy_.yylloc.first_line); return 91 
break;
case 54:$$= new Token("Class","Palabra Reservada clase: ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 25 
break;
case 55:$$= new Token("interface","palabra reservada interface", yy_.yylloc.first_column,yy_.yylloc.first_line); return 11 
break;
case 56:$$= new Token("char","palabra reservada char", yy_.yylloc.first_column,yy_.yylloc.first_line); return 58 
break;
case 57:$$= new Token("double","palabra reservada double", yy_.yylloc.first_column,yy_.yylloc.first_line); return 57 
break;
case 58:$$= new Token("int","palabra reservada int", yy_.yylloc.first_column,yy_.yylloc.first_line); return 55 
break;
case 59:$$= new Token("String","palabra reservada String", yy_.yylloc.first_column,yy_.yylloc.first_line); return 35 
break;
case 60:$$= new Token("boolean","palabra reservada boolean", yy_.yylloc.first_column,yy_.yylloc.first_line); return 56 
break;
case 61:$$= new Token(yy_.yytext,"id", yy_.yylloc.first_column,yy_.yylloc.first_line); return 12 
break;
case 62:return 5
break;
case 63: $$ = new Error("LEXICO","No se esperaba el caracter: "+yy_.yytext,yy_.yylloc.first_column,yy_.yylloc.first_line);  console.error('Este es un error léxico: ' + yy_.yytext + '  en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:(('[^☼]')))/,/^(?:(([0-9]+)(\.([0-9]+))?))/,/^(?:([0-9]+))/,/^(?::)/,/^(?:\/)/,/^(?:;)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:\*)/,/^(?:\^)/,/^(?:%)/,/^(?:\.)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:=)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:public\b)/,/^(?:static\b)/,/^(?:main\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:out\b)/,/^(?:System\b)/,/^(?:void\b)/,/^(?:args\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:false\b)/,/^(?:true\b)/,/^(?:class\b)/,/^(?:interface\b)/,/^(?:char\b)/,/^(?:double\b)/,/^(?:int\b)/,/^(?:String\b)/,/^(?:boolean\b)/,/^(?:(([a-zA-Z_])[a-zA-Z0-9_]*))/,/^(?:$)/,/^(?:)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GramaticaPrueba;
exports.Parser = GramaticaPrueba.Parser;
exports.parse = function () { return GramaticaPrueba.parse.apply(GramaticaPrueba, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}