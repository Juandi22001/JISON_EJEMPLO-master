/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GramaticaP2 = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,7],$V2=[1,8],$V3=[5,8],$V4=[2,5,23],$V5=[1,24],$V6=[1,26],$V7=[1,27],$V8=[1,28],$V9=[1,29],$Va=[1,30],$Vb=[1,37],$Vc=[1,34],$Vd=[1,35],$Ve=[13,15,53,54,55,56,57],$Vf=[2,13,15,27,53,54,55,56,57],$Vg=[21,62,99],$Vh=[2,103],$Vi=[1,61],$Vj=[1,60],$Vk=[1,59],$Vl=[1,65],$Vm=[1,85],$Vn=[1,84],$Vo=[1,75],$Vp=[1,76],$Vq=[1,77],$Vr=[1,78],$Vs=[1,79],$Vt=[1,80],$Vu=[1,82],$Vv=[1,83],$Vw=[2,9,13,15,27,52,53,54,55,56,57,58,65,66,68,74,100,101],$Vx=[1,96],$Vy=[1,95],$Vz=[1,97],$VA=[1,98],$VB=[1,99],$VC=[1,100],$VD=[1,101],$VE=[1,102],$VF=[1,103],$VG=[1,104],$VH=[1,105],$VI=[1,106],$VJ=[1,107],$VK=[1,108],$VL=[20,21,76,78,79,80,81,82,83,84,85,86,87,88,89,90,99],$VM=[20,99],$VN=[20,21,76,78,83,84,85,86,87,88,89,90,99],$VO=[20,21,76,78,79,80,83,84,85,86,87,88,89,90,99],$VP=[20,21,83,84,85,86,87,88,89,90,99],$VQ=[20,21,87,88,89,90,99],$VR=[1,137],$VS=[1,144],$VT=[1,165],$VU=[1,159],$VV=[1,164],$VW=[1,163],$VX=[1,161],$VY=[1,160],$VZ=[1,162],$V_=[1,167],$V$=[1,168],$V01=[2,9,13,15,27,52,53,54,55,56,57,58,65,66,68,74,75,100,101],$V11=[9,13,52,53,54,55,56,57,58,65,66,68,74,100,101],$V21=[1,173];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"ListaInterfaces":4,"EOF":5,"ListaClases":6,"SentenciaInterface":7,"interface":8,"id":9,"InicioInterface":10,"{":11,"InterfaceMenu":12,"}":13,"DeclaracionInterface":14,"public":15,"TIPO":16,"(":17,"Metodos_FuncionesI":18,"Parametros_Tipo":19,")":20,";":21,"SentenciaClase":22,"class":23,"InicioClase":24,"MenuClase":25,"DeclaracionClase":26,"void":27,"Metodos_Funciones":28,"L_Ids":29,"AsignacionV_P":30,"static":31,"main":32,"S":33,"tring":34,"[":35,"]":36,"args":37,"BlockInstrucciones":38,"Metodo_Funcion":39,"Instrucciones":40,"INSTRUCCION":41,"SOUT":42,"WHILE":43,"IF":44,"DOWHILE":45,"FOR":46,"AsignacionV_P_SIMPLE":47,"DeclaracionM_Funciones":48,"CONTINUE":49,"Return_F":50,"Return_M":51,"BREAK":52,"int":53,"String":54,"boolean":55,"double":56,"char":57,"for":58,"Declaracion_f":59,"EXPRESION":60,"Increment_Decrement":61,"=":62,"incremento":63,"decremento":64,"do":65,"while":66,"Condicionales":67,"System":68,".":69,"out":70,"TipoPrint":71,"println":72,"print":73,"if":74,"else":75,"-":76,"!":77,"+":78,"*":79,"/":80,"%":81,"^":82,"<":83,">":84,">=":85,"<=":86,"==":87,"!=":88,"||":89,"&&":90,"decimal":91,"true":92,"false":93,"STRING_LITERAL":94,"EXPRESION_METODO":95,"caracter":96,"entero":97,"Llamar_Metodo_Exp":98,",":99,"continue":100,"return":101,"Break_Ciclo":102,"break":103,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"interface",9:"id",11:"{",13:"}",15:"public",17:"(",20:")",21:";",23:"class",27:"void",28:"Metodos_Funciones",31:"static",32:"main",33:"S",34:"tring",35:"[",36:"]",37:"args",52:"BREAK",53:"int",54:"String",55:"boolean",56:"double",57:"char",58:"for",62:"=",63:"incremento",64:"decremento",65:"do",66:"while",68:"System",69:".",70:"out",72:"println",73:"print",74:"if",75:"else",76:"-",77:"!",78:"+",79:"*",80:"/",81:"%",82:"^",83:"<",84:">",85:">=",86:"<=",87:"==",88:"!=",89:"||",90:"&&",91:"decimal",92:"true",93:"false",94:"STRING_LITERAL",96:"caracter",97:"entero",99:",",100:"continue",101:"return",103:"break"},
productions_: [0,[3,2],[3,2],[3,1],[4,2],[4,1],[7,3],[10,3],[10,2],[12,2],[12,1],[14,5],[14,4],[18,3],[18,2],[6,2],[6,1],[22,3],[22,1],[24,3],[24,2],[24,1],[25,2],[25,1],[26,5],[26,4],[26,5],[26,4],[26,4],[26,12],[26,3],[26,1],[39,3],[39,2],[40,2],[40,1],[40,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[16,1],[16,1],[16,1],[16,1],[16,1],[46,9],[59,4],[59,3],[61,2],[61,2],[45,5],[42,9],[71,1],[71,1],[43,3],[44,3],[44,5],[44,5],[67,3],[38,3],[38,2],[60,2],[60,2],[60,3],[60,3],[60,3],[60,3],[60,3],[60,3],[60,3],[60,3],[60,3],[60,3],[60,3],[60,3],[60,3],[60,3],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,3],[47,4],[47,5],[47,4],[95,4],[95,3],[95,1],[98,3],[98,1],[48,3],[29,3],[29,1],[30,3],[30,1],[19,4],[19,2],[49,2],[51,2],[50,3],[102,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: case 2:
this.$ = new Arbol($$[$0-1]); return this.$;
break;
case 3:
this.$ = new Arbol($$[$0]); return this.$;
break;
case 4: case 15: case 22: case 34:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 5: case 16: case 23: case 35: case 100: case 103:
 this.$ = [$$[$0]]; 
break;
case 6:
this.$ =new Interface(this._$.first_line,this._$.first_column,$$[$0-1],$$[$0]);
break;
case 7: case 19: case 66: case 67:
this.$ = $$[$0-1];
break;
case 11:
this.$ new FuncionInterface(this._$.first_line,this._$.first_column,$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1]);
break;
case 12:
this.$ new FuncionInterface(this._$.first_line,this._$.first_column,"-",$$[$0-2],$$[$0-1],$$[$0]);
break;
case 13:
this.$ new Metodo_FuncionIN(this._$.first_line,this._$.first_column,$$[$0-1]);
break;
case 14:
this.$ new Metodo_FuncionIN(this._$.first_line,this._$.first_column,[]);
break;
case 17:
this.$ new Class(this._$.first_line,this._$.first_column,$$[$0-1],$$[$0]);
break;
case 18: case 21: case 31: case 36:
  console.error('Este es un error sintÃ¡ctico: [' + yytext + ']  en la linea: ' +  this._$.first_line + ', en la columna: ' + this._$.first_column);  
break;
case 20: case 68: case 105:
this.$ = [];
break;
case 24:
this.$ new Metodo_C(this._$.first_line,this._$.first_column,$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1]);
break;
case 25: case 27:
this.$ new Metodo_C(this._$.first_line,this._$.first_column,".",$$[$0-2],$$[$0-1],$$[$0]);
break;
case 26:
this.$ new Funcion_C(this._$.first_line,this._$.first_column,$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1]);
break;
case 28:
this.$ new DeclaracionAfuera(this._$.first_line,this._$.first_column,$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
break;
case 29:
this.$ new Main(this._$.first_line,this._$.first_column,$$[$0-8],$$[$0-2]);
break;
case 30:
this.$ new DeclaracionAfuera(this._$.first_line,this._$.first_column,".",$$[$0-1],$$[$0],$$[$01]);
break;
case 32:
this.$ new Metodo_Fc(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0]);
break;
case 33:
this.$ new Metodo_Fc(this._$.first_line,this._$.first_column,[],$$[$01]);
break;
case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 45: case 46: case 61:
this.$ = $$[$0];
break;
case 44:
this.$ = $$[$0]; console.log("continue");
break;
case 47:
this.$ = $$[$0];console.log("break");
break;
case 48:
this.$ = new Type(types.INT);
break;
case 49:
this.$ = new Type(types.STRING);
break;
case 50:
this.$ = new Type(types.BOOLEAN);
break;
case 51:
this.$ = new Type(types.DOUBLE);
break;
case 52:
this.$ = new Type(types.CHAR);
break;
case 53:
this.$ new For_alv(this._$.first_line,this._$.first_column,$$[$0-6],$$[$0-4],$$[$0-2],$$[$0]);
break;
case 54:
this.$ new Declaracion_For(this._$.first_line,this._$.first_column,$$[$0-3],$$[$0-2],$$[$0]);
break;
case 55:
this.$ new Asignacion(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0]);
break;
case 56: case 57:
this.$ new Increment_Decrements(this._$.first_line,this._$.first_column,$$[$0-1],$$[$0]);
break;
case 58:
this.$ new Do_While(this._$.first_line,this._$.first_column,$$[$0-4],$$[$0-3],$$[$0-1]);
break;
case 59:
this.$ new Sout(this._$.first_line,this._$.first_column,$$[$0-6],$$[$0-4]);

break;
case 60:
this.$ = $$[$0] ; 
break;
case 62:
this.$ new Whiles(this._$.first_line,this._$.first_column,$$[$0-1],$$[$0]);
break;
case 63:
this.$ new Ifs(this._$.first_line,this._$.first_column,$$[$0-1],$$[$0],[]);
break;
case 64:
this.$ new Ifs(this._$.first_line,this._$.first_column,$$[$0-3],$$[$0-2],$$[$0-1]);
break;
case 65:
this.$ new Ifs(this._$.first_line,this._$.first_column,$$[$0-3],$$[$0-2],[$$[$0-1]]);
break;
case 69: case 70:
this.$ new Operaciones(this._$.first_line,this._$.first_column,null,$$[$0-1],$$[$0]);
break;
case 71: case 72: case 73: case 74: case 75: case 76:
this.$ new Operaciones(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0-1],$$[$0]);
break;
case 77: case 78: case 79: case 83: case 84:
this.$ new Condicionales(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0-1],$$[$0]);
break;
case 80:
this.$ new Condicionales(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0-1],$$[$0]);  
break;
case 81: case 82:
this.$ new Condicionales(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 85:
 this.$ = new Dato_Exp(this._$.first_line, this._$.first_column, new Type(types.DOUBLE), Number($$[$0])); 
break;
case 86:
 this.$ = new Dato_Exp( this._$.first_line, this._$.first_column,new Type(types.BOOLEAN), true); 
break;
case 87:
  this.$ = new Dato_Exp(this._$.first_line, this._$.first_column,new Type(types.BOOLEAN), false); 
break;
case 88:
  this.$ = new Dato_Exp(this._$.first_line, this._$.first_column,new Type(types.STRING), $$[$0].replace(/\"/g,"")); 
break;
case 89:
 this.$ = $$[$0]
break;
case 90:
 this.$ = new Dato_Exp( this._$.first_line, this._$.first_column,new Type(types.CHAR), $$[$0].replace(/\'/g,"")); 
break;
case 91:
 this.$ = new Dato_Exp( this._$.first_line, this._$.first_column,new Type(types.INT), Number($$[$0]) ); 
break;
case 92:
 this.$ = $$[$0-1]; 
break;
case 93:
this.$ new Asignacion(this._$.first_line,this._$.first_column,$$[$0-3],$$[$0-1]);
break;
case 94:
this.$ new LlamadaMetodo(this._$.first_line,this._$.first_column,$$[$0-4],$$[$0-2]);
break;
case 95:
this.$ new LlamadaMetodo(this._$.first_line,this._$.first_column,$$[$0-3],[]);
break;
case 96:
this.$ new LlamadaMetodo(this._$.first_line,this._$.first_column,$$[$0-3],$$[$0-1]);
break;
case 97:
this.$ new LlamadaMetodo(this._$.first_line,this._$.first_column,$$[$0-2],[]);
break;
case 98:
this.$ new Id_Solo(this._$.first_line,this._$.first_column,$$[$0]);
break;
case 99: case 102:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 101:
this.$ new DeclaracionMF(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0-1],$$[$0]);
break;
case 104:
this.$ = $$[$0-1]
break;
case 106:
 $$[$0-3].push(new Parametro($$[$0-1] , $$[$0] ,this._$.first_line , this._$.first_column)); this.$ = $$[$0-3]; 
break;
case 107:
 this.$ = [new Parametro($$[$0-1] , $$[$0] ,this._$.first_line , this._$.first_column)]; 
break;
case 108:
this.$ = new Continues( $$[$0-1], this._$.first_line, this._$.first_column);
break;
case 109:
this.$ = new ReturnM($$[$0-1], this._$.first_line , this._$.first_column);
break;
case 110:
this.$ = new ReturnF($$[$0-2], this._$.first_line , this._$.first_column);
break;
case 111:
this.$ new Break(this._$.first_line,this._$.first_column,$$[$0-1]);
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,4],6:3,7:5,8:$V1,22:6,23:$V2},{1:[3]},{5:[1,10],7:11,8:$V1},{2:$V0,5:[1,12],22:13,23:$V2},{1:[2,3]},o($V3,[2,5]),o($V4,[2,16]),{9:[1,14]},{9:[1,15]},o($V4,[2,18]),{1:[2,1]},o($V3,[2,4]),{1:[2,2]},o($V4,[2,15]),{10:16,11:[1,17]},{2:[1,20],11:[1,19],24:18},o($V3,[2,6]),{12:21,13:[1,22],14:23,15:$V5,16:25,53:$V6,54:$V7,55:$V8,56:$V9,57:$Va},o($V4,[2,17]),{2:$Vb,13:[1,32],15:$Vc,16:36,25:31,26:33,27:$Vd,53:$V6,54:$V7,55:$V8,56:$V9,57:$Va},o($V4,[2,21]),{13:[1,38],14:39,15:$V5,16:25,53:$V6,54:$V7,55:$V8,56:$V9,57:$Va},o($V3,[2,8]),o($Ve,[2,10]),{16:40,53:$V6,54:$V7,55:$V8,56:$V9,57:$Va},{9:[1,41]},{9:[2,48]},{9:[2,49]},{9:[2,50]},{9:[2,51]},{9:[2,52]},{2:$Vb,13:[1,42],15:$Vc,16:36,26:43,27:$Vd,53:$V6,54:$V7,55:$V8,56:$V9,57:$Va},o($V4,[2,20]),o($Vf,[2,23]),{16:45,27:[1,44],31:[1,46],53:$V6,54:$V7,55:$V8,56:$V9,57:$Va},{9:[1,47]},{9:[1,48],29:49},o($Vf,[2,31]),o($V3,[2,7]),o($Ve,[2,9]),{9:[1,50]},{17:[1,51]},o($V4,[2,19]),o($Vf,[2,22]),{9:[1,52]},{9:[1,53],29:54},{27:[1,55]},{17:[1,56]},o($Vg,$Vh,{17:[1,57]}),{21:$Vi,30:58,62:$Vj,99:$Vk},{17:[1,62]},{16:66,18:63,19:64,20:$Vl,53:$V6,54:$V7,55:$V8,56:$V9,57:$Va},{17:[1,67]},o($Vg,$Vh,{17:[1,68]}),{21:$Vi,30:69,62:$Vj,99:$Vk},{32:[1,70]},{28:[1,71]},{28:[1,72]},o($Vf,[2,30]),{9:[1,73]},{9:$Vm,17:$Vn,60:74,76:$Vo,77:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:81,96:$Vu,97:$Vv},o($Vw,[2,105]),{16:66,18:86,19:64,20:$Vl,53:$V6,54:$V7,55:$V8,56:$V9,57:$Va},o($Ve,[2,12]),{20:[1,87],99:[1,88]},{21:[1,89]},{9:[1,90]},{28:[1,91]},{28:[1,92]},o($Vf,[2,28]),{17:[1,93]},o($Vf,[2,25]),o($Vf,[2,27]),o($Vg,[2,102]),{21:[1,94],76:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK},{9:$Vm,17:$Vn,60:109,76:$Vo,77:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:81,96:$Vu,97:$Vv},{9:$Vm,17:$Vn,60:110,76:$Vo,77:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:81,96:$Vu,97:$Vv},o($VL,[2,85]),o($VL,[2,86]),o($VL,[2,87]),o($VL,[2,88]),o($VL,[2,89]),o($VL,[2,90]),o($VL,[2,91]),{9:$Vm,17:$Vn,60:111,76:$Vo,77:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:81,96:$Vu,97:$Vv},o($VL,[2,98],{17:[1,112]}),o($Ve,[2,11]),{21:[1,113]},{16:114,53:$V6,54:$V7,55:$V8,56:$V9,57:$Va},o($Ve,[2,14]),o($VM,[2,107]),o($Vf,[2,24]),o($Vf,[2,26]),{33:[1,115]},o($Vw,[2,104]),{9:$Vm,17:$Vn,60:116,76:$Vo,77:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:81,96:$Vu,97:$Vv},{9:$Vm,17:$Vn,60:117,76:$Vo,77:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:81,96:$Vu,97:$Vv},{9:$Vm,17:$Vn,60:118,76:$Vo,77:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:81,96:$Vu,97:$Vv},{9:$Vm,17:$Vn,60:119,76:$Vo,77:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:81,96:$Vu,97:$Vv},{9:$Vm,17:$Vn,60:120,76:$Vo,77:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:81,96:$Vu,97:$Vv},{9:$Vm,17:$Vn,60:121,76:$Vo,77:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:81,96:$Vu,97:$Vv},{9:$Vm,17:$Vn,60:122,76:$Vo,77:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:81,96:$Vu,97:$Vv},{9:$Vm,17:$Vn,60:123,76:$Vo,77:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:81,96:$Vu,97:$Vv},{9:$Vm,17:$Vn,60:124,76:$Vo,77:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:81,96:$Vu,97:$Vv},{9:$Vm,17:$Vn,60:125,76:$Vo,77:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:81,96:$Vu,97:$Vv},{9:$Vm,17:$Vn,60:126,76:$Vo,77:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:81,96:$Vu,97:$Vv},{9:$Vm,17:$Vn,60:127,76:$Vo,77:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:81,96:$Vu,97:$Vv},{9:$Vm,17:$Vn,60:128,76:$Vo,77:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:81,96:$Vu,97:$Vv},{9:$Vm,17:$Vn,60:129,76:$Vo,77:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:81,96:$Vu,97:$Vv},o($VL,[2,69]),o($VL,[2,70]),{20:[1,130],76:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK},{9:$Vm,17:$Vn,20:[1,132],60:133,76:$Vo,77:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:81,96:$Vu,97:$Vv,98:131},o($Ve,[2,13]),{9:[1,134]},{34:[1,135]},o($VN,[2,71],{79:$Vz,80:$VA,81:$VB,82:$VC}),o($VN,[2,72],{79:$Vz,80:$VA,81:$VB,82:$VC}),o($VO,[2,73],{81:$VB,82:$VC}),o($VO,[2,74],{81:$VB,82:$VC}),o($VL,[2,75]),o($VL,[2,76]),o($VP,[2,77],{76:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC}),o($VP,[2,78],{76:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC}),o($VP,[2,79],{76:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC}),o($VP,[2,80],{76:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC}),o($VQ,[2,81],{76:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG}),o($VQ,[2,82],{76:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG}),o([20,21,89,99],[2,83],{76:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,90:$VK}),o([20,21,89,90,99],[2,84],{76:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI}),o($VL,[2,92]),{20:[1,136],99:$VR},o($VL,[2,97]),o($VM,[2,100],{76:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK}),o($VM,[2,106]),{35:[1,138]},o($VL,[2,96]),{9:$Vm,17:$Vn,60:139,76:$Vo,77:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:81,96:$Vu,97:$Vv},{36:[1,140]},o($VM,[2,99],{76:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK}),{37:[1,141]},{20:[1,142]},{11:$VS,38:143},o($Vf,[2,29]),{2:[1,148],9:$VT,13:[1,146],16:166,40:145,41:147,42:149,43:150,44:151,45:152,46:153,47:154,48:155,49:156,50:157,51:158,52:$VU,53:$V6,54:$V7,55:$V8,56:$V9,57:$Va,58:$VV,65:$VW,66:$VX,68:$VY,74:$VZ,100:$V_,101:$V$},{9:$VT,13:[1,169],16:166,41:170,42:149,43:150,44:151,45:152,46:153,47:154,48:155,49:156,50:157,51:158,52:$VU,53:$V6,54:$V7,55:$V8,56:$V9,57:$Va,58:$VV,65:$VW,66:$VX,68:$VY,74:$VZ,100:$V_,101:$V$},o($V01,[2,68]),o($V11,[2,35]),o($V11,[2,36]),o($V11,[2,37]),o($V11,[2,38]),o($V11,[2,39]),o($V11,[2,40]),o($V11,[2,41]),o($V11,[2,42]),o($V11,[2,43]),o($V11,[2,44]),o($V11,[2,45]),o($V11,[2,46]),o($V11,[2,47]),{69:[1,171]},{17:$V21,67:172},{17:$V21,67:174},{11:$VS,38:175},{17:[1,176]},{17:[1,178],62:[1,177]},{9:[1,180],29:179},{21:[1,181]},{9:$Vm,17:$Vn,21:[1,183],60:182,76:$Vo,77:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:81,96:$Vu,97:$Vv},o($V01,[2,67]),o($V11,[2,34]),{70:[1,184]},{11:$VS,38:185},{9:$Vm,17:$Vn,60:186,76:$Vo,77:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:81,96:$Vu,97:$Vv},{11:$VS,38:187},{66:[1,188]},{9:[1,191],16:190,53:$V6,54:$V7,55:$V8,56:$V9,57:$Va,59:189},{9:$Vm,17:$Vn,60:192,76:$Vo,77:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:81,96:$Vu,97:$Vv},{9:$Vm,17:$Vn,20:[1,194],60:133,76:$Vo,77:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:81,96:$Vu,97:$Vv,98:193},{21:$Vi,30:195,62:$Vj,99:$Vk},o($Vg,$Vh),o($V11,[2,108]),{21:[1,196],76:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK},o($V11,[2,109]),{69:[1,197]},o($V11,[2,62]),{20:[1,198],76:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK},o($V11,[2,63],{75:[1,199]}),{17:$V21,67:200},{21:[1,201]},{9:[1,202]},{62:[1,203]},{21:[1,204],76:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK},{20:[1,205],99:$VR},{21:[1,206]},o($V11,[2,101]),o($V11,[2,110]),{71:207,72:[1,208],73:[1,209]},o([11,21],[2,66]),{11:$VS,38:210,44:211,74:$VZ},{21:[1,212]},{9:$Vm,17:$Vn,60:213,76:$Vo,77:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:81,96:$Vu,97:$Vv},{62:[1,214]},{9:$Vm,17:$Vn,60:215,76:$Vo,77:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:81,96:$Vu,97:$Vv},o($V11,[2,93]),{21:[1,216]},o($V11,[2,95]),{17:[1,217]},{17:[2,60]},{17:[2,61]},o($V11,[2,64]),o($V11,[2,65]),o($V11,[2,58]),{21:[1,218],76:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK},{9:$Vm,17:$Vn,60:219,76:$Vo,77:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:81,96:$Vu,97:$Vv},{21:[2,55],76:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK},o($V11,[2,94]),{9:$Vm,17:$Vn,60:220,76:$Vo,77:$Vp,91:$Vq,92:$Vr,93:$Vs,94:$Vt,95:81,96:$Vu,97:$Vv},{9:[1,222],61:221},{21:[2,54],76:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK},{20:[1,223],76:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,90:$VK},{20:[1,224]},{63:[1,225],64:[1,226]},{21:[1,227]},{11:$VS,38:228},{20:[2,56]},{20:[2,57]},o($V11,[2,59]),o($V11,[2,53])],
defaultActions: {4:[2,3],10:[2,1],12:[2,2],26:[2,48],27:[2,49],28:[2,50],29:[2,51],30:[2,52],208:[2,60],209:[2,61],225:[2,56],226:[2,57]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

   const {Arbol} = require('../Simbols/Arbol');
   const {Class} =require ('../ClasesParaArbol/Class')
   const {Interface} =require ('../ClasesParaArbol/Class')
   const {FuncionInterface}= require('../ClasesParaArbol/FuncionInterface')
   const {Metodo_FuncionIN} =require('../ClasesParaArbol/MetodoOFuncion_Interface')
   const {Metodo_C} =require('../ClasesParaArbol/Metodo_C')
   const {Funcion_C} =require('../ClasesParaArbol/Funcion_C')
   const {DeclaracionAfuera} =require('../ClasesParaArbol/DeclaracionAfuera')
   const {Main} =require('../ClasesParaArbol/Main')
   const {Metodo_Fc} =require('../ClasesParaArbol/Metodo_Fc')
   const {For_alv}=require('../ClasesParaArbol/For')
   const {Declaracion_For}=require('../ClasesParaArbol/Declaracion_For')
   
   const {Asignacion}=require('../ClasesParaArbol/Asignacion')
   const {Do_While}=require('../ClasesParaArbol/Do_While')
  
   const {Increment_Decrements}=require('../ClasesParaArbol/Increment_Decrement')
   const {Sout}=require('../ClasesParaArbol/Sout')
   const {Whiles}=require('../ClasesParaArbol/While')
   const {Ifs}=require('../ClasesParaArbol/IF')
   const {Operaciones}=require('../ClasesParaArbol/Operaciones')
    const {Id_Solo}=require('../ClasesParaArbol/Id_Solo')
    const {ReturnM}=require('../ClasesParaArbol/ReturnM')
  const {ReturnF}=require('../ClasesParaArbol/ReturnF')
  
   const {Condicionales}=require('../ClasesParaArbol/Condicionales') 
   const {Dato_Exp}=require('../ClasesParaArbol/Dato_Exp') 

   const {Switchs}=require('../ClasesParaArbol/Switch') 
   const {Case}=require('../ClasesParaArbol/Case') 
   const {Default}=require('../ClasesParaArbol/Default') 
    const {Break}=require('../ClasesParaArbol/Break') 
   const {Exp_Case}=require('../ClasesParaArbol/Exp_Case') 
    const {LlamadaMetodo}=require('../ClasesParaArbol/LlamadaMetodo') 
    const {DeclaracionMF}=require('../ClasesParaArbol/DeclaracionMF') 
      const {Parametro}=require('../ClasesParaArbol/Parametro') 
      const {Continues}=require('../ClasesParaArbol/Continue') 
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 96
break;
case 1:return 91
break;
case 2:return 97 
break;
case 3:console.log("STRING QUEMADO ");return 94
break;
case 4:console.log("comentario Bloque reconocido");return 'comentarioBloque'
break;
case 5:console.log("comLinea reconocido"); return 'comentarioLinea'
break;
case 6:return ':'
break;
case 7:return 80
break;
case 8:return 21
break;
case 9:return 64
break;
case 10:return 76
break;
case 11:return 63
break;
case 12:return 78
break;
case 13:return 79
break;
case 14:return 82
break;
case 15:return 81
break;
case 16:return 69 // punto pero TOKEN
break;
case 17:return 86
break;
case 18:return 85 ;
break;
case 19:return 83
break;
case 20:return 84
break;
case 21:return 87
break;
case 22:return 88
break;
case 23:return 89
break;
case 24:return 90
break;
case 25:return 77
break;
case 26:return 62
break;
case 27:return 99
break;
case 28:return 17
break;
case 29:return 20
break;
case 30:return 11
break;
case 31:return 13
break;
case 32:return 32
break;
case 33:return 72
break;
case 34:return 73
break;
case 35:return 70 
break;
case 36:return 68
break;
case 37:return 27
break;
case 38:return 101
break;
case 39:return 74
break;
case 40:return 75
break;
case 41:return 'switch'
break;
case 42:return 'case'
break;
case 43:return 'default' 
break;
case 44:return 103
break;
case 45:return 100
break;
case 46:return 66
break;
case 47:return 65
break;
case 48:return 58
break;
case 49:return 93
break;
case 50:return 92
break;
case 51:return 23
break;
case 52:return 8
break;
case 53:return 57
break;
case 54:return 56  
break;
case 55:return 53
break;
case 56:return 54
break;
case 57:return 55
break;
case 58:return 9
break;
case 59:return 5
break;
case 60: console.error('Este es un error lÃ©xico: ' + yy_.yytext + '  en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:\s+[ \t\r\n\f]\n\/\/.*[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/](('[^â¼]')))/,/^(?:(([0-9]+)(\.([0-9]+))?))/,/^(?:{entero})/,/^(?:(("[^"]*")))/,/^(?:{comentarioBloque})/,/^(?:{comentarioLinea})/,/^(?::)/,/^(?:\/)/,/^(?:;)/,/^(?:--)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:\*)/,/^(?:\^)/,/^(?:%)/,/^(?:\.)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:=)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:main\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:out\b)/,/^(?:System\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:false\b)/,/^(?:true\b)/,/^(?:class\b)/,/^(?:interface\b)/,/^(?:char\b)/,/^(?:double\b)/,/^(?:int\b)/,/^(?:String\b)/,/^(?:boolean\b)/,/^(?:{id})/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GramaticaP2;
exports.Parser = GramaticaP2.Parser;
exports.parse = function () { return GramaticaP2.parse.apply(GramaticaP2, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}