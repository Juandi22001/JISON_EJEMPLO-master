/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GramaticaP2 = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,10],$V2=[1,8],$V3=[5,10,11,13],$V4=[2,8],$V5=[2,5,10,11,13,15,19,24,37,64,65,66,67,68,71,72,74,80,107,108,109],$V6=[1,31],$V7=[1,24],$V8=[1,30],$V9=[1,25],$Va=[1,33],$Vb=[1,32],$Vc=[1,34],$Vd=[1,35],$Ve=[1,36],$Vf=[1,40],$Vg=[2,10,11,13,15,19,24,37,64,65,66,67],$Vh=[1,53],$Vi=[2,127],$Vj=[10,11,13,19,37,64,65,66,67],$Vk=[15,50],$Vl=[1,68],$Vm=[1,81],$Vn=[1,79],$Vo=[1,70],$Vp=[1,71],$Vq=[1,72],$Vr=[1,73],$Vs=[1,74],$Vt=[1,75],$Vu=[1,77],$Vv=[1,78],$Vw=[2,44],$Vx=[1,90],$Vy=[1,91],$Vz=[1,92],$VA=[2,10,11,13,15,19,24,37,50,64,65,66,67,68,71,72,74,80,107,108,109],$VB=[1,97],$VC=[1,104],$VD=[1,103],$VE=[1,105],$VF=[1,106],$VG=[1,107],$VH=[1,108],$VI=[1,109],$VJ=[1,110],$VK=[1,111],$VL=[1,112],$VM=[1,113],$VN=[1,114],$VO=[1,115],$VP=[1,116],$VQ=[2,10,11,13,15,19,24,26,27,37,50,64,65,66,67,68,71,72,74,80,82,84,85,86,87,88,89,90,91,92,93,94,95,96,107,108,109],$VR=[1,120],$VS=[1,121],$VT=[1,123],$VU=[2,126],$VV=[26,50],$VW=[1,128],$VX=[1,135],$VY=[1,138],$VZ=[2,125],$V_=[1,188],$V$=[1,187],$V01=[1,186],$V11=[1,185],$V21=[1,183],$V31=[1,182],$V41=[1,184],$V51=[1,189],$V61=[1,190],$V71=[1,191],$V81=[2,10,11,13,15,19,24,26,27,37,50,64,65,66,67,68,71,72,74,80,82,84,89,90,91,92,93,94,95,96,107,108,109],$V91=[2,10,11,13,15,19,24,26,27,37,50,64,65,66,67,68,71,72,74,80,82,84,85,86,89,90,91,92,93,94,95,96,107,108,109],$Va1=[2,10,11,13,15,19,24,26,27,37,50,64,65,66,67,68,71,72,74,80,89,90,91,92,93,94,95,96,107,108,109],$Vb1=[2,10,11,13,15,19,24,26,27,37,50,64,65,66,67,68,71,72,74,80,93,94,95,96,107,108,109],$Vc1=[2,10,11,13,15,19,24,37,64,65,66,67,68,71,72,74,80,81,107,108,109],$Vd1=[10,11,13,15,19,68,71,72,74,80,107,108,109],$Ve1=[1,199];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"ComienzoA":4,"EOF":5,"InstruccionesA":6,"SentenciaClase":7,"SentenciaInterface":8,"COMENTARIOS":9,"ComentarioLinea":10,"ComentarioMulti":11,"ListaInterfaces":12,"public":13,"interface":14,"id":15,"InicioInterface":16,"{":17,"InterfaceMenu":18,"}":19,"DeclaracionInterface":20,"TIPO":21,"(":22,"Metodos_FuncionesI":23,"void":24,"Parametros_Tipo":25,")":26,";":27,"ListaClases":28,"class":29,"InicioClase":30,"MenuClase":31,"DeclaracionClase":32,"Metodos_Funciones":33,"DECLARACION":34,"static":35,"main":36,"String":37,"[":38,"]":39,"args":40,"BlockInstrucciones":41,"L_ids":42,"AsignacionV_P":43,"EXPRESION_METODO":44,"=":45,"EXPRESION":46,"ListaDeclaracion":47,"incremento":48,"decremento":49,",":50,"Instrucciones":51,"INSTRUCCION":52,"SOUT":53,"WHILE":54,"IF":55,"DOWHILE":56,"FOR":57,"AsignacionV_P_SIMPLE":58,"CONTINUE":59,"Return_F":60,"Return_M":61,"BREAK":62,"Increment_Decrement2":63,"int":64,"boolean":65,"double":66,"char":67,"for":68,"Declaracion_f":69,"Increment_Decrement":70,"do":71,"while":72,"Condicionales":73,"System":74,".":75,"out":76,"TipoPrint":77,"println":78,"print":79,"if":80,"else":81,"-":82,"!":83,"+":84,"*":85,"/":86,"%":87,"^":88,"<":89,">":90,">=":91,"<=":92,"==":93,"!=":94,"||":95,"&&":96,"decimal":97,"true":98,"false":99,"cadena":100,"caracter":101,"entero":102,"+=":103,"-=":104,"Llamar_Metodo_Exp":105,"DeclaracionM_Funciones":106,"continue":107,"return":108,"break":109,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"ComentarioLinea",11:"ComentarioMulti",13:"public",14:"interface",15:"id",17:"{",19:"}",22:"(",24:"void",26:")",27:";",29:"class",35:"static",36:"main",37:"String",38:"[",39:"]",40:"args",45:"=",48:"incremento",49:"decremento",50:",",64:"int",65:"boolean",66:"double",67:"char",68:"for",71:"do",72:"while",74:"System",75:".",76:"out",78:"println",79:"print",80:"if",81:"else",82:"-",83:"!",84:"+",85:"*",86:"/",87:"%",88:"^",89:"<",90:">",91:">=",92:"<=",93:"==",94:"!=",95:"||",96:"&&",97:"decimal",98:"true",99:"false",100:"cadena",101:"caracter",102:"entero",103:"+=",104:"-=",107:"continue",108:"return",109:"break"},
productions_: [0,[3,2],[3,0],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[9,1],[9,1],[12,2],[12,1],[8,4],[16,3],[16,2],[18,2],[18,1],[20,5],[20,4],[20,5],[20,1],[23,3],[23,2],[28,2],[28,1],[7,4],[30,3],[30,2],[31,2],[31,1],[32,5],[32,4],[32,5],[32,4],[32,1],[32,11],[32,3],[32,2],[32,1],[32,4],[32,1],[34,3],[43,3],[43,1],[43,2],[43,2],[47,3],[47,1],[33,3],[33,3],[33,2],[33,2],[51,2],[51,1],[51,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[21,1],[21,1],[21,1],[21,1],[21,1],[57,9],[69,4],[69,3],[69,2],[69,1],[70,2],[70,2],[63,3],[63,3],[56,5],[53,9],[77,1],[77,1],[54,3],[55,3],[55,5],[55,5],[73,3],[41,3],[41,2],[46,2],[46,2],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,3],[46,1],[58,4],[58,4],[58,4],[58,5],[58,4],[44,4],[44,3],[44,1],[105,3],[105,1],[106,3],[42,3],[42,1],[25,4],[25,2],[25,1],[59,2],[61,2],[60,3],[62,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return this.$
break;
case 13:
this.$ =new Interface(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0-1]);
break;
case 14:
this.$ = $$[$0-1];
break;
case 41:
 this.$ = new Error("Sintactico","No se esperaba el caracter: "+yytext, this._$.first_column, this._$.first_line);  console.error('Este es un error lÃ©xico: ' + yytext + '  en la linea: ' + this.first_line + ', en la columna: ' + this.first_column);
break;
case 55:
 this.$ = new Error("Sintactico","No se esperaba el caracter: "+yytext, this._$.first_column, this._$.first_line);  console.error('Este es un error sintactico: ' + yytext + '  en la linea: ' + this.first_line + ', en la columna: ' +this.first_column);
break;
}
},
table: [{1:[2,2],3:1,4:2,5:[1,7],6:3,7:4,8:5,9:6,10:$V0,11:$V1,13:$V2},{1:[3]},{5:[1,11],6:12,7:4,8:5,9:6,10:$V0,11:$V1,13:$V2},o($V3,[2,4]),o($V3,[2,5]),o($V3,[2,6]),o($V3,[2,7]),o($V3,$V4),{14:[1,14],29:[1,13]},o($V5,[2,9]),o($V5,[2,10]),o($V3,$V4,{1:[2,1]}),o($V3,[2,3]),{15:[1,15]},{15:[1,16]},{17:[1,18],30:17},{16:19,17:[1,20]},o($V3,[2,26]),{2:$V6,9:29,10:$V0,11:$V1,13:$V7,15:$V8,19:[1,22],21:26,24:$V9,31:21,32:23,34:27,37:$Va,44:28,64:$Vb,65:$Vc,66:$Vd,67:$Ve},o($V3,[2,13]),{9:42,10:$V0,11:$V1,13:$Vf,18:37,19:[1,38],20:39,21:41,37:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},{2:$V6,9:29,10:$V0,11:$V1,13:$V7,15:$V8,19:[1,43],21:26,24:$V9,32:44,34:27,37:$Va,44:28,64:$Vb,65:$Vc,66:$Vd,67:$Ve},o($V3,[2,28]),o($Vg,[2,30]),{21:46,24:[1,45],35:[1,47],37:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},{15:[1,48]},{15:[1,49],42:50},o($Vg,[2,35]),{27:[1,51]},o($Vg,[2,39]),{22:$Vh,27:$Vi,45:[1,52]},o($Vg,[2,41]),{15:[2,70]},{15:[2,71]},{15:[2,72]},{15:[2,73]},{15:[2,74]},{9:42,10:$V0,11:$V1,13:$Vf,19:[1,54],20:55,21:41,37:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},o($V3,[2,15]),o($Vj,[2,17]),{21:56,24:[1,57],37:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},{15:[1,58]},o($Vj,[2,21]),o($V3,[2,27]),o($Vg,[2,29]),{15:[1,59]},{15:[1,60],43:62,47:61},{24:[1,63]},{22:[1,64]},o($Vk,[2,132],{22:[1,65]}),{15:$Vl,43:66,50:[1,67]},o($Vg,[2,38]),{15:$Vm,22:$Vn,44:76,46:69,70:80,82:$Vo,83:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv},{15:$Vm,22:$Vn,26:[1,83],44:76,46:84,70:80,82:$Vo,83:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,105:82},o($V3,[2,14]),o($Vj,[2,16]),{15:[1,85]},{15:[1,86]},{22:[1,87]},{22:[1,88]},o([2,10,11,13,15,19,24,37,50,64,65,66,67],$Vw,{22:[1,89],45:$Vx,48:$Vy,49:$Vz}),o([2,10,11,13,15,19,24,37,64,65,66,67,68,71,72,74,80,107,108,109],[2,42],{50:[1,93]}),o($VA,[2,48]),{36:[1,94]},{15:$Vm,21:98,22:$Vn,25:96,26:$VB,33:95,37:$Va,44:76,46:99,64:$Vb,65:$Vc,66:$Vd,67:$Ve,70:80,82:$Vo,83:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv},{15:$Vm,21:98,22:$Vn,25:96,26:$VB,33:100,37:$Va,44:76,46:99,64:$Vb,65:$Vc,66:$Vd,67:$Ve,70:80,82:$Vo,83:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv},o($Vg,[2,37]),{15:[1,101]},o($VA,$Vw,{45:$Vx,48:$Vy,49:$Vz}),{27:[1,102],82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP},{15:$Vm,22:$Vn,44:76,46:117,70:80,82:$Vo,83:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv},{15:$Vm,22:$Vn,44:76,46:118,70:80,82:$Vo,83:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv},o($VQ,[2,111]),o($VQ,[2,112]),o($VQ,[2,113]),o($VQ,[2,114]),o($VQ,[2,115]),o($VQ,[2,116]),o($VQ,[2,117]),{15:$Vm,22:$Vn,44:76,46:119,70:80,82:$Vo,83:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv},o($VQ,[2,119]),o($VQ,$Vi,{22:$Vh,48:$VR,49:$VS}),{26:[1,122],50:$VT},o($VQ,$VU),o($VV,[2,129],{82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP}),{22:[1,124]},{22:[1,125]},{15:$Vm,21:98,22:$Vn,23:126,25:127,26:$VW,37:$Va,44:76,46:99,64:$Vb,65:$Vc,66:$Vd,67:$Ve,70:80,82:$Vo,83:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv},{15:$Vm,21:98,22:$Vn,25:96,26:$VB,33:129,37:$Va,44:76,46:99,64:$Vb,65:$Vc,66:$Vd,67:$Ve,70:80,82:$Vo,83:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv},{15:$Vm,21:98,22:$Vn,25:96,26:$VB,33:130,37:$Va,44:76,46:99,64:$Vb,65:$Vc,66:$Vd,67:$Ve,70:80,82:$Vo,83:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv},{15:$Vm,22:$Vn,44:76,46:131,70:80,82:$Vo,83:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv},o($VA,[2,45]),o($VA,[2,46]),{15:$Vl,43:132},{22:[1,133]},o($Vg,[2,32]),{26:[1,134],50:$VX},{17:$VY,27:[1,137],41:136},{15:[1,139]},o($VV,[2,135],{82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP}),o($Vg,[2,34]),o($Vk,[2,131]),o($Vg,[2,40]),{15:$Vm,22:$Vn,44:76,46:140,70:80,82:$Vo,83:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv},{15:$Vm,22:$Vn,44:76,46:141,70:80,82:$Vo,83:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv},{15:$Vm,22:$Vn,44:76,46:142,70:80,82:$Vo,83:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv},{15:$Vm,22:$Vn,44:76,46:143,70:80,82:$Vo,83:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv},{15:$Vm,22:$Vn,44:76,46:144,70:80,82:$Vo,83:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv},{15:$Vm,22:$Vn,44:76,46:145,70:80,82:$Vo,83:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv},{15:$Vm,22:$Vn,44:76,46:146,70:80,82:$Vo,83:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv},{15:$Vm,22:$Vn,44:76,46:147,70:80,82:$Vo,83:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv},{15:$Vm,22:$Vn,44:76,46:148,70:80,82:$Vo,83:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv},{15:$Vm,22:$Vn,44:76,46:149,70:80,82:$Vo,83:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv},{15:$Vm,22:$Vn,44:76,46:150,70:80,82:$Vo,83:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv},{15:$Vm,22:$Vn,44:76,46:151,70:80,82:$Vo,83:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv},{15:$Vm,22:$Vn,44:76,46:152,70:80,82:$Vo,83:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv},{15:$Vm,22:$Vn,44:76,46:153,70:80,82:$Vo,83:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv},o($VQ,[2,95]),o($VQ,[2,96]),{26:[1,154],82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP},o($VQ,[2,80]),o($VQ,[2,81]),o($VQ,$VZ),{15:$Vm,22:$Vn,44:76,46:155,70:80,82:$Vo,83:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv},{15:$Vm,21:98,22:$Vn,23:156,25:127,26:$VW,37:$Va,44:76,46:99,64:$Vb,65:$Vc,66:$Vd,67:$Ve,70:80,82:$Vo,83:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv},{15:$Vm,21:98,22:$Vn,23:157,25:127,26:$VW,37:$Va,44:76,46:99,64:$Vb,65:$Vc,66:$Vd,67:$Ve,70:80,82:$Vo,83:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv},o($Vj,[2,19]),{26:[1,158],50:$VX},{27:[1,159]},o($Vg,[2,31]),o($Vg,[2,33]),o($VA,[2,43],{82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP}),o($VA,[2,47]),{37:[1,160]},{17:$VY,27:[1,162],41:161},{21:163,37:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},o($Vg,[2,51]),o($Vg,[2,52]),{2:[1,167],9:169,10:$V0,11:$V1,13:$V_,15:$V$,19:[1,165],34:176,44:174,51:164,52:166,53:168,54:170,55:171,56:172,57:173,58:175,59:177,60:178,61:179,62:180,63:181,68:$V01,71:$V11,72:$V21,74:$V31,80:$V41,107:$V51,108:$V61,109:$V71},o($VV,[2,134]),o($V81,[2,97],{85:$VE,86:$VF,87:$VG,88:$VH}),o($V81,[2,98],{85:$VE,86:$VF,87:$VG,88:$VH}),o($V91,[2,99],{87:$VG,88:$VH}),o($V91,[2,100],{87:$VG,88:$VH}),o($VQ,[2,101]),o($VQ,[2,102]),o($Va1,[2,103],{82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH}),o($Va1,[2,104],{82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH}),o($Va1,[2,105],{82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH}),o($Va1,[2,106],{82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH}),o($Vb1,[2,107],{82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL}),o($Vb1,[2,108],{82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL}),o([2,10,11,13,15,19,24,26,27,37,50,64,65,66,67,68,71,72,74,80,95,107,108,109],[2,109],{82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,96:$VP}),o([2,10,11,13,15,19,24,26,27,37,50,64,65,66,67,68,71,72,74,80,95,96,107,108,109],[2,110],{82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN}),o($VQ,[2,118]),o($VV,[2,128],{82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP}),o($Vj,[2,18]),o($Vj,[2,20]),{27:[1,192]},o($Vj,[2,23]),{38:[1,193]},o($Vg,[2,49]),o($Vg,[2,50]),{15:[1,194]},{9:169,10:$V0,11:$V1,13:$V_,15:$V$,19:[1,195],34:176,44:174,52:196,53:168,54:170,55:171,56:172,57:173,58:175,59:177,60:178,61:179,62:180,63:181,68:$V01,71:$V11,72:$V21,74:$V31,80:$V41,107:$V51,108:$V61,109:$V71},o($Vc1,[2,94]),o($Vd1,[2,54]),o($Vd1,[2,55]),o($Vd1,[2,56]),o($Vd1,[2,57]),o($Vd1,[2,58]),o($Vd1,[2,59]),o($Vd1,[2,60]),o($Vd1,[2,61]),o($Vd1,[2,62]),o($Vd1,[2,63]),o($Vd1,[2,64]),o($Vd1,[2,65]),o($Vd1,[2,66]),o($Vd1,[2,67]),o($Vd1,[2,68]),o($Vd1,[2,69]),{75:[1,197]},{22:$Ve1,73:198},{22:$Ve1,73:200},{17:$VY,41:201},{22:[1,202]},o($Vd1,$Vi,{22:[1,203],45:[1,204],48:[1,207],49:[1,208],103:[1,205],104:[1,206]}),{21:209,37:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve},{27:[1,210]},{15:$Vm,22:$Vn,27:[1,212],44:76,46:211,70:80,82:$Vo,83:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv},{27:[1,213]},o($Vj,[2,22]),{39:[1,214]},o($VV,[2,133]),o($Vc1,[2,93]),o($Vd1,[2,53]),{76:[1,215]},{17:$VY,41:216},{15:$Vm,22:$Vn,44:76,46:217,70:80,82:$Vo,83:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv},{17:$VY,41:218},{72:[1,219]},{15:[1,222],21:221,37:$Va,64:$Vb,65:$Vc,66:$Vd,67:$Ve,69:220},{15:$Vm,22:$Vn,26:[1,224],44:76,46:84,70:80,82:$Vo,83:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv,105:223},{15:$Vm,22:$Vn,44:76,46:225,70:80,82:$Vo,83:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv},{15:$Vm,22:$Vn,44:76,46:226,70:80,82:$Vo,83:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv},{15:$Vm,22:$Vn,44:76,46:227,70:80,82:$Vo,83:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv},{27:[1,228]},{27:[1,229]},{15:$Vl,43:62,47:61},o($Vd1,[2,136]),{27:[1,230],82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP},o($Vd1,[2,137]),o($Vd1,[2,139]),{40:[1,231]},{75:[1,232]},o($Vd1,[2,88]),{26:[1,233],82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP},o($Vd1,[2,89],{81:[1,234]}),{22:$Ve1,73:235},{27:[1,236]},{15:[1,237]},{27:[2,79],45:[1,238]},{26:[1,239],50:$VT},o($Vd1,$VU,{27:[1,240]}),{27:[1,241],82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP},{27:[1,242],82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP},{27:[1,243],82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP},o($Vd1,[2,82]),o($Vd1,[2,83]),o($Vd1,[2,138]),{26:[1,244]},{77:245,78:[1,246],79:[1,247]},o([17,27],[2,92]),{17:$VY,41:248,55:249,80:$V41},{27:[1,250]},{15:$Vm,22:$Vn,44:76,46:251,70:80,82:$Vo,83:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv},{27:[2,78],45:[1,252]},{15:$Vm,22:$Vn,44:76,46:253,70:80,82:$Vo,83:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv},o($Vd1,$VZ,{27:[1,254]}),o($Vd1,[2,124]),o($Vd1,[2,120]),o($Vd1,[2,121]),o($Vd1,[2,122]),{17:$VY,41:255},{22:[1,256]},{22:[2,86]},{22:[2,87]},o($Vd1,[2,90]),o($Vd1,[2,91]),o($Vd1,[2,84]),{27:[1,257],82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP},{15:$Vm,22:$Vn,44:76,46:258,70:80,82:$Vo,83:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv},{27:[2,77],82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP},o($Vd1,[2,123]),o($Vg,[2,36]),{15:$Vm,22:$Vn,44:76,46:259,70:80,82:$Vo,83:$Vp,97:$Vq,98:$Vr,99:$Vs,100:$Vt,101:$Vu,102:$Vv},{15:[1,261],70:260},{27:[2,76],82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP},{26:[1,262],82:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP},{26:[1,263]},{48:$VR,49:$VS},{27:[1,264]},{17:$VY,41:265},o($Vd1,[2,85]),o($Vd1,[2,75])],
defaultActions: {32:[2,70],33:[2,71],34:[2,72],35:[2,73],36:[2,74],246:[2,86],247:[2,87]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  const {Arbol} = require('../Simbols/Arbol');
   const {Class} =require ('../ClasesParaArbol/Class')
   const {Interface} =require ('../ClasesParaArbol/Interface')
   const {FunctionInterface}= require('../ClasesParaArbol/FuncionInterface')
   const {Metodo_FuncionIN} =require('../ClasesParaArbol/MetodoOFuncion_Interface')
   const {Metodo_C} =require('../ClasesParaArbol/Metodo_C')
   const {Funcion_C} =require('../ClasesParaArbol/Funcion_C')
   const {DeclaracionAfuera} =require('../ClasesParaArbol/DeclaracionAfuera')
   const {Main} =require('../ClasesParaArbol/Main')
   const {Metodo_Fc} =require('../ClasesParaArbol/Metodo_Fc')
   const {For_alv}=require('../ClasesParaArbol/For')
   const {Declaracion_For}=require('../ClasesParaArbol/Declaracion_For')
   
   const {Asignacion}=require('../ClasesParaArbol/Asignacion')
   const {Do_While}=require('../ClasesParaArbol/Do_While')
    const {Comentarios}=require('../ClasesParaArbol/Comentarios')
 
   const {Increment_Decrements}=require('../ClasesParaArbol/Increment_Decrement')
   const {Sout}=require('../ClasesParaArbol/Sout')
   const {Whiles}=require('../ClasesParaArbol/While')
   const {Ifs}=require('../ClasesParaArbol/IF')
   const {Operaciones}=require('../ClasesParaArbol/Operaciones')
    const {Id_Solo}=require('../ClasesParaArbol/Id_Solo')
    const {ReturnM}=require('../ClasesParaArbol/ReturnM')
  const {ReturnF}=require('../ClasesParaArbol/ReturnF')
  
   const {Condicionales}=require('../ClasesParaArbol/Condicionales') 
   const {Dato_Exp}=require('../ClasesParaArbol/Dato_Exp') 

   const {Switchs}=require('../ClasesParaArbol/Switch') 
   const {Case}=require('../ClasesParaArbol/Case') 
   const {Default}=require('../ClasesParaArbol/Default') 
    const {Break}=require('../ClasesParaArbol/Break') 
   const {Exp_Case}=require('../ClasesParaArbol/Exp_Case') 
    const {LlamadaMetodo}=require('../ClasesParaArbol/LlamadaMetodo') 
    const {DeclaracionMF}=require('../ClasesParaArbol/DeclaracionMF') 
      const {Parametro}=require('../ClasesParaArbol/Parametro') 
      const {Continues}=require('../ClasesParaArbol/Continue') 
      const {TipoV}=require('../ClasesParaArbol/TipoV') 
         let CErrores=require('../ManejoErrores/Errores');
    let CNodoError=require('../ManejoErrores/NodoError');
    
         const{Errores} =require('../ManejoErrores/Errores');

         const{Token} =require('../ManejoErrores/Token');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// cualquier cosa xd
break;
case 1:$$= new Token(yy_.yytext,"comentario de Linea ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 10 
break;
case 2:$$= new Token(yy_.yytext,"comentarioMulti ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 11 
break;
case 3:$$= new Token(yy_.yytext,"char ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 101 
break;
case 4:$$= new Token(yy_.yytext,"cadena ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 100 
break;
case 5:$$= new Token(yy_.yytext,"decimal ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 97 
break;
case 6:$$= new Token(yy_.yytext,"entero ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 102 
break;
case 7:$$= new Token(":","dos puntos ", yy_.yylloc.first_column,yy_.yylloc.first_line); return ':' 
break;
case 8:$$= new Token("/","barra ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 86 
break;
case 9:$$= new Token(";","punto y coma ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 27 
break;
case 10:$$= new Token("--","decremento ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 49 
break;
case 11:$$= new Token("-=","MENOR IGUAL ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 104 
break;
case 12:$$= new Token("-","menos", yy_.yylloc.first_column,yy_.yylloc.first_line); return 82 
break;
case 13:$$= new Token("++","plus plus ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 48 
break;
case 14:$$= new Token("+=","mAS IGUAL  ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 103 
break;
case 15:$$= new Token("+","mas  ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 84 
break;
case 16:$$= new Token("*","asterisco ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 85 
break;
case 17:$$= new Token("^","elevado ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 88 
break;
case 18:$$= new Token("%","porcentaje ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 87 
break;
case 19:$$= new Token(".","punto", yy_.yylloc.first_column,yy_.yylloc.first_line); return 75 
break;
case 20:$$= new Token("<=","menor igual ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 92 
break;
case 21:$$= new Token(">=","mayor igual ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 91 
break;
case 22:$$= new Token("<","menor ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 89 
break;
case 23:$$= new Token(">","mayor ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 90 
break;
case 24:$$= new Token("==","doble igual ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 93 
break;
case 25:$$= new Token("!=","diferente ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 94 
break;
case 26:$$= new Token("||","O ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 95 
break;
case 27:$$= new Token("&&","Y ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 96 
break;
case 28:$$= new Token("!","admiracion ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 83 
break;
case 29:$$= new Token("="," igual ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 45 
break;
case 30:$$= new Token(",","coma", yy_.yylloc.first_column,yy_.yylloc.first_line); return 50 
break;
case 31:$$= new Token("(" , "parentesis abierto", yy_.yylloc.first_column,yy_.yylloc.first_line); return 22 
break;
case 32:$$= new Token(")","parentesis cerrado", yy_.yylloc.first_column,yy_.yylloc.first_line); return 26 
break;
case 33:$$= new Token("[" , "CORCHETE abierto", yy_.yylloc.first_column,yy_.yylloc.first_line); return 38 
break;
case 34:$$= new Token("]","Corchete cerrado", yy_.yylloc.first_column,yy_.yylloc.first_line); return 39 
break;
case 35:$$= new Token("{","Llave abierta", yy_.yylloc.first_column,yy_.yylloc.first_line); return 17 
break;
case 36:$$= new Token("}",  "llave cerrada", yy_.yylloc.first_column,yy_.yylloc.first_line); return 19 
break;
case 37:$$= new Token("public","palabra reservada public", yy_.yylloc.first_column,yy_.yylloc.first_line); return 13 
break;
case 38:$$= new Token("static","palabra reservada static", yy_.yylloc.first_column,yy_.yylloc.first_line); return 35 
break;
case 39:$$= new Token("main","palabra reservada main", yy_.yylloc.first_column,yy_.yylloc.first_line); return 36 
break;
case 40:$$= new Token("println","palabra reservada println", yy_.yylloc.first_column,yy_.yylloc.first_line); return 78 
break;
case 41:$$= new Token("print","palabra reservada print", yy_.yylloc.first_column,yy_.yylloc.first_line); return 79 
break;
case 42:$$= new Token("out","palabra reservada out", yy_.yylloc.first_column,yy_.yylloc.first_line); return 76 
break;
case 43:$$= new Token("System","palabra reservada System", yy_.yylloc.first_column,yy_.yylloc.first_line); return 74 
break;
case 44:$$= new Token("void","palabra reservada void", yy_.yylloc.first_column,yy_.yylloc.first_line); return 24 
break;
case 45:$$= new Token("args","palabra reservada args", yy_.yylloc.first_column,yy_.yylloc.first_line); return 40 
break;
case 46:$$= new Token("return","palabra reservada return", yy_.yylloc.first_column,yy_.yylloc.first_line); return 108 
break;
case 47:$$= new Token("if","palabra reservada if", yy_.yylloc.first_column,yy_.yylloc.first_line); return 80 
break;
case 48:$$= new Token("else","palabra reservada else", yy_.yylloc.first_column,yy_.yylloc.first_line); return 81 
break;
case 49:return 'switch'
break;
case 50:return 'case'
break;
case 51:return 'default' 
break;
case 52:$$= new Token("break","palabra reservada break", yy_.yylloc.first_column,yy_.yylloc.first_line); return 109 
break;
case 53:$$= new Token("continue","palabra reservada continue", yy_.yylloc.first_column,yy_.yylloc.first_line); return 107 
break;
case 54:$$= new Token("while","palabra reservada while", yy_.yylloc.first_column,yy_.yylloc.first_line); return 72 
break;
case 55:$$= new Token("do","palabra reservada do", yy_.yylloc.first_column,yy_.yylloc.first_line); return 71 
break;
case 56:$$= new Token("for","palabra reservada for", yy_.yylloc.first_column,yy_.yylloc.first_line); return 68 
break;
case 57:$$= new Token("false","palabra reservada false", yy_.yylloc.first_column,yy_.yylloc.first_line); return 99 
break;
case 58:$$= new Token("true","palabra reservada true", yy_.yylloc.first_column,yy_.yylloc.first_line); return 98 
break;
case 59:$$= new Token("Class","Palabra Reservada clase: ", yy_.yylloc.first_column,yy_.yylloc.first_line); return 29 
break;
case 60:$$= new Token("interface","palabra reservada interface", yy_.yylloc.first_column,yy_.yylloc.first_line); return 14 
break;
case 61:$$= new Token("char","palabra reservada char", yy_.yylloc.first_column,yy_.yylloc.first_line); return 67 
break;
case 62:$$= new Token("double","palabra reservada double", yy_.yylloc.first_column,yy_.yylloc.first_line); return 66 
break;
case 63:$$= new Token("int","palabra reservada int", yy_.yylloc.first_column,yy_.yylloc.first_line); return 64 
break;
case 64:$$= new Token("String","palabra reservada String", yy_.yylloc.first_column,yy_.yylloc.first_line); return 37 
break;
case 65:$$= new Token("boolean","palabra reservada boolean", yy_.yylloc.first_column,yy_.yylloc.first_line); return 65 
break;
case 66:$$= new Token(yy_.yytext,"id", yy_.yylloc.first_column,yy_.yylloc.first_line); return 15 
break;
case 67:return 5
break;
case 68: $$ = new Error("LEXICO","No se esperaba el caracter: "+yy_.yytext,yy_.yylloc.first_column,yy_.yylloc.first_line);  console.error('Este es un error lÃ©xico: ' + yy_.yytext + '  en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:(('[^â¼]')))/,/^(?:(("[^"]*")))/,/^(?:(([0-9]+)(\.([0-9]+))?))/,/^(?:([0-9]+))/,/^(?::)/,/^(?:\/)/,/^(?:;)/,/^(?:--)/,/^(?:-=)/,/^(?:-)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:\*)/,/^(?:\^)/,/^(?:%)/,/^(?:\.)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:=)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:public\b)/,/^(?:static\b)/,/^(?:main\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:out\b)/,/^(?:System\b)/,/^(?:void\b)/,/^(?:args\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:false\b)/,/^(?:true\b)/,/^(?:class\b)/,/^(?:interface\b)/,/^(?:char\b)/,/^(?:double\b)/,/^(?:int\b)/,/^(?:String\b)/,/^(?:boolean\b)/,/^(?:(([a-zA-Z_])[a-zA-Z0-9_]*))/,/^(?:$)/,/^(?:)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GramaticaP2;
exports.Parser = GramaticaP2.Parser;
exports.parse = function () { return GramaticaP2.parse.apply(GramaticaP2, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}